<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<tagfile>
<compound kind="namespace">
<name/>
<filename>index.adoc</filename>
<class kind="class">QString</class>
<class kind="class">QObject</class>
<class kind="class">QIODeviceBase</class>
<class kind="class">QIODevice</class>
<class kind="class">QProcess</class>
<class kind="class">QMetaObject</class>
<class kind="class">QStringConverterBase</class>
<class kind="class">QTextCodec</class>
<class kind="class">QListSpecialMethodsBase</class>
<class kind="class">QListSpecialMethods</class>
<class kind="class">QList</class>
<class kind="class">QStringList</class>
<class kind="class">LoggedProcess</class>
<class kind="class">BaseVersion</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QScopedPointerDeleter</class>
<class kind="class">QScopedPointer</class>
<class kind="class">QScopedPointerObjectDeleteLater</class>
<class kind="class">QScopedPointerDeleteLater</class>
<class kind="class">unique_qobject_ptr</class>
<class kind="class">QSharedPointer</class>
<class kind="class">shared_qobject_ptr</class>
<class kind="class">QLoggingCategory</class>
<class kind="class">TaskStepState</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QUuid</class>
<class kind="class">qint64</class>
<class kind="class">TaskStepProgress</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">TaskStepProgressList</class>
<class kind="class">QRunnable</class>
<class kind="class">Task</class>
<class kind="class">QAbstractItemModel</class>
<class kind="class">QAbstractListModel</class>
<class kind="class">QModelIndex</class>
<class kind="class">QVariant</class>
<class kind="class">QHash</class>
<class kind="class">QByteArray</class>
<class kind="class">BaseVersionList</class>
<class kind="class">InstanceCopyPrefs</class>
<class kind="class">Setting</class>
<class kind="class">SettingsObject</class>
<class kind="class">SettingsObjectPtr</class>
<class kind="class">SettingsObjectWeakPtr</class>
<class kind="class">InstanceNameChange</class>
<class kind="class">QPaintDevice</class>
<class kind="class">QWidget</class>
<class kind="class">ShouldUpdate</class>
<class kind="class">InstanceName</class>
<class kind="class">InstanceTask</class>
<class kind="class">Validity</class>
<class kind="class">QDateTime</class>
<class kind="class">QMap</class>
<class kind="class">QVariantMap</class>
<class kind="class">Token</class>
<class kind="class">Skin</class>
<class kind="class">Cape</class>
<class kind="class">MinecraftEntitlement</class>
<class kind="class">MinecraftProfile</class>
<class kind="class">AccountType</class>
<class kind="class">AccountState</class>
<class kind="class">QJsonObject</class>
<class kind="class">AccountData</class>
<class kind="class">Usable</class>
<class kind="class">MinecraftAccount</class>
<class kind="class">AuthSession</class>
<class kind="class">AuthSessionPtr</class>
<class kind="class">UseLock</class>
<class kind="class">AccountTaskState</class>
<class kind="class">AuthStep</class>
<class kind="class">QUrl</class>
<class kind="class">AuthFlow</class>
<class kind="class">MinecraftAccountPtr</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">AccountProfile</class>
<class kind="class">QPixmap</class>
<class kind="class">IPathMatcher</class>
<class kind="class">INIFile</class>
<class kind="class">RuntimeContext</class>
<class kind="class">quint16</class>
<class kind="class">MinecraftTarget</class>
<class kind="class">QDir</class>
<class kind="class">LaunchTask</class>
<class kind="class">BaseInstance</class>
<class kind="class">InstancePtr</class>
<class kind="class">__int64_t</class>
<class kind="class">int64_t</class>
<class kind="class">QSet</class>
<class kind="class">QProcessEnvironment</class>
<class kind="class">QMenu</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">LaunchController</class>
<class kind="class">LocalPeer</class>
<class kind="class">InstanceWindow</class>
<class kind="class">MainWindow</class>
<class kind="class">SetupWizard</class>
<class kind="class">GenericPageProvider</class>
<class kind="class">QFile</class>
<class kind="class">HttpMetaCache</class>
<class kind="class">InstanceList</class>
<class kind="class">AccountList</class>
<class kind="class">IconList</class>
<class kind="class">QNetworkAccessManager</class>
<class kind="class">JavaInstallList</class>
<class kind="class">ExternalUpdater</class>
<class kind="class">BaseProfilerFactory</class>
<class kind="class">BaseDetachedToolFactory</class>
<class kind="class">TranslationsModel</class>
<class kind="class">ITheme</class>
<class kind="class">MCEditTool</class>
<class kind="class">ThemeManager</class>
<class kind="class">IconTheme</class>
<class kind="class">QCoreApplication</class>
<class kind="class">QGuiApplication</class>
<class kind="class">QApplication</class>
<class kind="class">QFlags</class>
<class kind="class">QEvent</class>
<class kind="class">QIcon</class>
<class kind="class">Application</class>
<class kind="class">QDialog</class>
<class kind="class">QMessageBox</class>
<class kind="class">QCheckBox</class>
<class kind="class">QPair</class>
<class kind="class">QChar</class>
<class kind="class">QRegularExpression</class>
<class kind="class">s_units_si</class>
<class kind="class">s_units_kibi</class>
<class kind="class">ulMatcher</class>
<class kind="class">Exception</class>
<class kind="class">QFileInfo</class>
<class kind="class">QIntegerForSize</class>
<class kind="class">QIntegerForSize</class>
<class kind="class">QIntegerForSizeof</class>
<class kind="class">qsizetype</class>
<class kind="class">QThread</class>
<class kind="class">__uintmax_t</class>
<class kind="class">uintmax_t</class>
<class kind="class">TypeFlag</class>
<class kind="class">MinecraftInstance</class>
<class kind="class">BaseInstaller</class>
<class kind="class">JavaVersion</class>
<class kind="class">QVector</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QPointer</class>
<class kind="class">ResourceType</class>
<class kind="class">ResourceStatus</class>
<class kind="class">SortType</class>
<class kind="class">EnableAction</class>
<class kind="class">Resource</class>
<class kind="class">Mod</class>
<class kind="class">ModLicense</class>
<class kind="class">ModDetails</class>
<class kind="class">QSize</class>
<class kind="class">QImage</class>
<class kind="class">QBasicMutex</class>
<class kind="class">QMutex</class>
<class kind="class">QPixmapCache</class>
<class kind="class">ModFolderModel</class>
<class kind="class">ResourceFolderModel</class>
<class kind="class">ResourcePackFolderModel</class>
<class kind="class">ShaderPackFolderModel</class>
<class kind="class">TexturePackFolderModel</class>
<class kind="class">WorldList</class>
<class kind="class">GameOptions</class>
<class kind="class">LaunchStep</class>
<class kind="class">PackProfile</class>
<class kind="class">MinecraftInstancePtr</class>
<class kind="class">InstanceCreationTask</class>
<class kind="class">ExponentialSeries</class>
<class kind="class">QFileSystemWatcher</class>
<class kind="class">InstanceId</class>
<class kind="class">GroupId</class>
<class kind="class">InstanceLocator</class>
<class kind="class">InstCreateError</class>
<class kind="class">GroupsState</class>
<class kind="class">TrashHistoryItem</class>
<class kind="class">QMimeData</class>
<class kind="class">QModelIndexList</class>
<class kind="class">LogModel</class>
<class kind="class">NullInstance</class>
<class kind="class">WatchLock</class>
<class kind="class">INISettingsObject</class>
<class kind="class">GROUP_FILE_FORMAT_VERSION</class>
<class kind="class">InstanceStaging</class>
<class kind="class">GZip</class>
<class kind="class">Filter</class>
<class kind="class">ContainsFilter</class>
<class kind="class">ExactFilter</class>
<class kind="class">ExactIfPresentFilter</class>
<class kind="class">RegexpFilter</class>
<class kind="class">ExactListFilter</class>
<class kind="class">QuaZip</class>
<class kind="class">QFileInfoList</class>
<class kind="class">OverrideSetting</class>
<class kind="class">QFileDevice</class>
<class kind="class">QAbstractButton</class>
<class kind="class">QJsonDocument</class>
<class kind="class">QJsonArray</class>
<class kind="class">QJsonValue</class>
<class kind="class">JSONValidationError</class>
<class kind="class">QDebug</class>
<class kind="class">Version</class>
<class kind="class">RecursiveFileSystemWatcher</class>
<class kind="class">MetaEntry</class>
<class kind="class">MetaEntryPtr</class>
<class kind="class">QNetworkRequest</class>
<class kind="class">QNetworkReply</class>
<class kind="class">QSslError</class>
<class kind="class">QFlags</class>
<class kind="class">QIncompatibleFlag</class>
<class kind="class">QQueue</class>
<class kind="class">ConcurrentTask</class>
<class kind="class">NetJob</class>
<class kind="class">InstanceCopyTask</class>
<class kind="class">RegexpMatcher</class>
<class kind="class">SequentialTask</class>
<class kind="class">LocalResourceUpdateTask</class>
<class kind="class">ResourceDownloadTask</class>
<class kind="class">QAbstractProxyModel</class>
<class kind="class">QSortFilterProxyModel</class>
<class kind="class">QAction</class>
<class kind="class">QFrame</class>
<class kind="class">QAbstractScrollArea</class>
<class kind="class">QAbstractItemView</class>
<class kind="class">QTreeView</class>
<class kind="class">size_t</class>
<class kind="class">QHeaderView</class>
<class kind="class">QCryptographicHash</class>
<class kind="class">QSaveFile</class>
<class kind="class">PSaveFile</class>
<class kind="class">InstanceImportTask</class>
<class kind="class">IconType</class>
<class kind="class">MMCImage</class>
<class kind="class">MMCIcon</class>
<class kind="class">PackedResourceType</class>
<class kind="class">QPushButton</class>
<class kind="class">BlockedMod</class>
<class kind="class">QDragEnterEvent</class>
<class kind="class">QDropEvent</class>
<class kind="class">BlockedModsDialog</class>
<class kind="class">FlameCreationTask</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">ModrinthCreationTask</class>
<class kind="class">fs</class>
<class kind="class">PasteUpload</class>
<class kind="class">JavaChecker</class>
<class kind="class">TextPrint</class>
<class kind="class">PrintServers</class>
<class kind="class">CheckJava</class>
<class kind="class">JavaInstall</class>
<class kind="class">JavaInstallPtr</class>
<class kind="class">JavaUtils</class>
<class kind="class">LookupServerAddress</class>
<class kind="class">PostLaunchCommand</class>
<class kind="class">TaskStepWrapper</class>
<class kind="class">PreLaunchCommand</class>
<class kind="class">QDomNode</class>
<class kind="class">QDomElement</class>
<class kind="class">NewsEntry</class>
<class kind="class">NewsEntryPtr</class>
<class kind="class">QuitAfterGameStop</class>
<class kind="class">NewsChecker</class>
<class kind="class">QTimer</class>
<class kind="class">AccountListVersion</class>
<class kind="class">GameOptionItem</class>
<class kind="class">MSAStep</class>
<class kind="class">QAbstractOAuthReplyHandler</class>
<class kind="class">QOAuthOobReplyHandler</class>
<class kind="class">CustomOAuthOobReplyHandler</class>
<class kind="class">GetSkinStep</class>
<class kind="class">EntitlementsStep</class>
<class kind="class">LauncherLoginStep</class>
<class kind="class">MSADeviceCodeStep</class>
<class kind="class">MinecraftProfileStep</class>
<class kind="class">XboxAuthorizationStep</class>
<class kind="class">XboxProfileStep</class>
<class kind="class">XboxUserStep</class>
<class kind="class">DeviceAuthorizationResponse</class>
<class kind="class">AuthenticationResponse</class>
<class kind="class">FoldersTask</class>
<class kind="class">AssetUpdateTask</class>
<class kind="class">AssetObject</class>
<class kind="class">AssetsIndex</class>
<class kind="class">ProblemSeverity</class>
<class kind="class">PatchProblem</class>
<class kind="class">ProblemProvider</class>
<class kind="class">ProblemContainer</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">LaunchProfile</class>
<class kind="class">VersionFile</class>
<class kind="class">UpdateActionChangeVersion</class>
<class kind="class">UpdateActionLatestRecommendedCompatible</class>
<class kind="class">UpdateActionRemove</class>
<class kind="class">UpdateActionImportantChanged</class>
<class kind="class">UpdateActionNone</class>
<class kind="class">UpdateAction</class>
<class kind="class">ModloaderMapEntry</class>
<class kind="class">Component</class>
<class kind="class">ComponentPtr</class>
<class kind="class">DefaultVariable</class>
<class kind="class">GradleSpecifier</class>
<class kind="class">MojangDownloadInfo</class>
<class kind="class">MojangLibraryDownloadInfo</class>
<class kind="class">MojangAssetIndexInfo</class>
<class kind="class">Library</class>
<class kind="class">Rule</class>
<class kind="class">RuleAction</class>
<class kind="class">OsRule</class>
<class kind="class">ImplicitRule</class>
<class kind="class">LibraryPtr</class>
<class kind="class">Agent</class>
<class kind="class">AgentPtr</class>
<class kind="class">PackProfileData</class>
<class kind="class">ComponentUpdateTask</class>
<class kind="class">FMLlib</class>
<class kind="class">VersionFilterData</class>
<class kind="class">g_VersionFilterData</class>
<class kind="class">FMLLibrariesTask</class>
<class kind="class">ClaimAccount</class>
<class kind="class">LibrariesTask</class>
<class kind="class">CreateGameFolders</class>
<class kind="class">ExtractNatives</class>
<class kind="class">PrintInstanceInfo</class>
<class kind="class">ModMinecraftJar</class>
<class kind="class">LauncherPartLaunch</class>
<class kind="class">QMainWindow</class>
<class kind="class">BasePage</class>
<class kind="class">BasePageContainer</class>
<class kind="class">QWizard</class>
<class kind="class">BasePageProvider</class>
<class kind="class">BaseExternalTool</class>
<class kind="class">BaseExternalToolFactory</class>
<class kind="class">DataMigrationTask</class>
<class kind="class">SeparatorPrefixTree</class>
<class kind="class">FileIgnoreProxy</class>
<class kind="class">BasePagePtr</class>
<class kind="class">JavaSettingsWidget</class>
<class kind="class">MinecraftSettingsWidget</class>
<class kind="class">InstanceSettingsPage</class>
<class kind="class">QTextFormat</class>
<class kind="class">QTextCharFormat</class>
<class kind="class">LogFormatProxyModel</class>
<class kind="class">LogPage</class>
<class kind="class">ResourceAPI</class>
<class kind="class">NetworkResourceAPI</class>
<class kind="class">ModrinthAPI</class>
<class kind="class">uint</class>
<class kind="class">FlameAPI</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">ManagedPackPage</class>
<class kind="class">GenericManagedPackPage</class>
<class kind="class">ModrinthManagedPackPage</class>
<class kind="class">FlameManagedPackPage</class>
<class kind="class">Ui_ExternalResourcesPage</class>
<class kind="class">QInputEvent</class>
<class kind="class">QKeyEvent</class>
<class kind="class">QItemSelectionRange</class>
<class kind="class">QItemSelection</class>
<class kind="class">QPoint</class>
<class kind="class">ExternalResourcesPage</class>
<class kind="class">ModFolderPage</class>
<class kind="class">CoreModFolderPage</class>
<class kind="class">NilModFolderPage</class>
<class kind="class">NotesPage</class>
<class kind="class">OtherLogsPage</class>
<class kind="class">DataPack</class>
<class kind="class">ResourcePack</class>
<class kind="class">TexturePack</class>
<class kind="class">InfoFrame</class>
<class kind="class">ModListView</class>
<class kind="class">QToolBar</class>
<class kind="class">WideBar</class>
<class kind="class">ResourcePackPage</class>
<class kind="class">QFileSystemModel</class>
<class kind="class">QIdentityProxyModel</class>
<class kind="class">ScreenShot</class>
<class kind="class">ScreenshotList</class>
<class kind="class">ImgurAlbumCreation</class>
<class kind="class">ScreenshotsPage</class>
<class kind="class">Server</class>
<class kind="class">ServersModel</class>
<class kind="class">ServersPage</class>
<class kind="class">ShaderPackPage</class>
<class kind="class">TexturePackPage</class>
<class kind="class">VersionPage</class>
<class kind="class">WorldListPage</class>
<class kind="class">InstancePageProvider</class>
<class kind="class">KonamiCode</class>
<class kind="class">BaseDetachedTool</class>
<class kind="class">BaseProfiler</class>
<class kind="class">PixmapCache</class>
<class kind="class">VersionFilterModel</class>
<class kind="class">VersionProxyModel</class>
<class kind="class">JavaListLoadTask</class>
<class kind="class">VersionFilePtr</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">ComponentUpdateTaskData</class>
<class kind="class">MinecraftLoadAndCheck</class>
<class kind="class">VanillaCreationTask</class>
<class kind="class">GameType</class>
<class kind="class">World</class>
<class kind="class">AutoInstallJava</class>
<class kind="class">ReconstructAssets</class>
<class kind="class">ScanModFolders</class>
<class kind="class">VerifyJavaInstall</class>
<class kind="class">ShaderPackFormat</class>
<class kind="class">ShaderPack</class>
<class kind="class">LocalShaderPackParseTask</class>
<class kind="class">WorldSaveFormat</class>
<class kind="class">WorldSave</class>
<class kind="class">QTabWidget</class>
<class kind="class">ModFilterWidget</class>
<class kind="class">GetModDependenciesTask</class>
<class kind="class">QLayoutItem</class>
<class kind="class">QLayout</class>
<class kind="class">PageContainer</class>
<class kind="class">QDialogButtonBox</class>
<class kind="class">QBoxLayout</class>
<class kind="class">QVBoxLayout</class>
<class kind="class">Ui_ResourcePage</class>
<class kind="class">ProgressWidget</class>
<class kind="class">LocalDataPackParseTask</class>
<class kind="class">LocalModParseTask</class>
<class kind="class">LocalTexturePackParseTask</class>
<class kind="class">LocalWorldSaveParseTask</class>
<class kind="class">ResourceFolderLoadTask</class>
<class kind="class">CapeChange</class>
<class kind="class">SkinDelete</class>
<class kind="class">SkinModel</class>
<class kind="class">SkinList</class>
<class kind="class">SkinUpload</class>
<class kind="class">CheckUpdateTask</class>
<class kind="class">EnsureMetadataTask</class>
<class kind="class">FlameCheckUpdate</class>
<class kind="class">QDragMoveEvent</class>
<class kind="class">FlamePackExportTask</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">ModrinthCheckUpdate</class>
<class kind="class">ModrinthPackExportTask</class>
<class kind="class">PassthroughSetting</class>
<class kind="class">MultipleOptionsTask</class>
<class kind="class">POTranslatorPrivate</class>
<class kind="class">QTranslator</class>
<class kind="class">POTranslator</class>
<class kind="class">Language</class>
<class kind="class">QCloseEvent</class>
<class kind="class">QToolButton</class>
<class kind="class">InstanceProxyModel</class>
<class kind="class">LabeledToolButton</class>
<class kind="class">QLabel</class>
<class kind="class">MinecraftLauncher</class>
<class kind="class">InstanceView</class>
<class kind="class">AboutDialog</class>
<class kind="class">ChooseProviderDialog</class>
<class kind="class">CopyInstanceDialog</class>
<class kind="class">QAbstractFileIconProvider</class>
<class kind="class">QFileIconProvider</class>
<class kind="class">FastFileIconProvider</class>
<class kind="class">ExportInstanceDialog</class>
<class kind="class">ExportPackDialog</class>
<class kind="class">ExportToModListDialog</class>
<class kind="class">IconPickerDialog</class>
<class kind="class">ImportResourceDialog</class>
<class kind="class">InstallLoaderDialog</class>
<class kind="class">MSALoginDialog</class>
<class kind="class">NewComponentDialog</class>
<class kind="class">ImportPage</class>
<class kind="class">ModpackProviderBasePage</class>
<class kind="class">FlamePage</class>
<class kind="class">NewInstanceDialog</class>
<class kind="class">NewsDialog</class>
<class kind="class">OfflineLoginDialog</class>
<class kind="class">ProfileSelectDialog</class>
<class kind="class">ProfileSetupDialog</class>
<class kind="class">SubTaskProgressBar</class>
<class kind="class">ProgressDialog</class>
<class kind="class">QTreeWidgetItem</class>
<class kind="class">ReviewMessageBox</class>
<class kind="class">ResourceUpdateDialog</class>
<class kind="class">ScrollMessageBox</class>
<class kind="class">UpdateAvailableDialog</class>
<class kind="class">QHBoxLayout</class>
<class kind="class">VersionSelectWidget</class>
<class kind="class">VersionSelectDialog</class>
<class kind="class">QOpenGLFunctions</class>
<class kind="class">QVector3D</class>
<class kind="class">QOpenGLShaderProgram</class>
<class kind="class">SkinProvider</class>
<class kind="class">QSurface</class>
<class kind="class">QWindow</class>
<class kind="class">QPaintDeviceWindow</class>
<class kind="class">QOpenGLWindow</class>
<class kind="class">QColor</class>
<class kind="class">QPointerEvent</class>
<class kind="class">QSinglePointEvent</class>
<class kind="class">QMouseEvent</class>
<class kind="class">QWheelEvent</class>
<class kind="class">SkinOpenGLWindow</class>
<class kind="class">QResizeEvent</class>
<class kind="class">SkinManageDialog</class>
<class kind="class">QAbstractItemDelegate</class>
<class kind="class">QStyledItemDelegate</class>
<class kind="class">QPainter</class>
<class kind="class">QStyleOption</class>
<class kind="class">QStyleOptionViewItem</class>
<class kind="class">ListViewDelegate</class>
<class kind="class">VisualRow</class>
<class kind="class">VisualGroup</class>
<class kind="class">QFlags</class>
<class kind="class">InstanceViewRoles</class>
<class kind="class">QRect</class>
<class kind="class">QItemSelectionModel</class>
<class kind="class">QRegion</class>
<class kind="class">QPaintEvent</class>
<class kind="class">QDragLeaveEvent</class>
<class kind="class">PageDialog</class>
<class kind="class">APIPage</class>
<class kind="class">AuthenticateTask</class>
<class kind="class">AccountListPage</class>
<class kind="class">ExternalToolsPage</class>
<class kind="class">JavaPage</class>
<class kind="class">LanguageSelectionWidget</class>
<class kind="class">LanguagePage</class>
<class kind="class">LauncherPage</class>
<class kind="class">MinecraftPage</class>
<class kind="class">ProxyPage</class>
<class kind="class">GameOptionsPage</class>
<class kind="class">McClient</class>
<class kind="class">McResolver</class>
<class kind="class">ServerPingTask</class>
<class kind="class">CustomPage</class>
<class kind="class">QProgressBar</class>
<class kind="class">OptionalModDialog</class>
<class kind="class">QTextObjectInterface</class>
<class kind="class">VariableSizedImageObject</class>
<class kind="class">QTextEdit</class>
<class kind="class">QTextBrowser</class>
<class kind="class">ProjectDescriptionPage</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">AtlOptionalModListModel</class>
<class kind="class">AtlOptionalModDialog</class>
<class kind="class">AtlPage</class>
<class kind="class">AtlUserInteractionSupportImpl</class>
<class kind="class">RWStorage</class>
<class kind="class">ModrinthPage</class>
<class kind="class">ModPage</class>
<class kind="class">QMetaTypeId</class>
<class kind="class">TechnicPage</class>
<class kind="class">QWizardPage</class>
<class kind="class">BaseWizardPage</class>
<class kind="class">AutoJavaWizardPage</class>
<class kind="class">JavaWizardWidget</class>
<class kind="class">JavaWizardPage</class>
<class kind="class">LanguageWizardPage</class>
<class kind="class">LoginWizardPage</class>
<class kind="class">PasteWizardPage</class>
<class kind="class">ThemeWizardPage</class>
<class kind="class">QStyle</class>
<class kind="class">QCommonStyle</class>
<class kind="class">QProxyStyle</class>
<class kind="class">QStyleHintReturn</class>
<class kind="class">HintOverrideProxyStyle</class>
<class kind="class">QComboBox</class>
<class kind="class">CheckComboBox</class>
<class kind="class">CustomCommands</class>
<class kind="class">EnvironmentVariables</class>
<class kind="class">QLineEdit</class>
<class kind="class">QFocusEvent</class>
<class kind="class">FocusLineEdit</class>
<class kind="class">IconLabel</class>
<class kind="class">QSpinBox</class>
<class kind="class">QGroupBox</class>
<class kind="class">QGridLayout</class>
<class kind="class">QSpacerItem</class>
<class kind="class">LineSeparator</class>
<class kind="class">QPlainTextEdit</class>
<class kind="class">LogView</class>
<class kind="class">PageModel</class>
<class kind="class">QListView</class>
<class kind="class">QStackedLayout</class>
<class kind="class">UserDataTypes</class>
<class kind="class">ProjectItemDelegate</class>
<class kind="class">ThemeFields</class>
<class kind="class">ThemeCustomizationWidget</class>
<class kind="class">QTextDocument</class>
<class kind="class">QSizeF</class>
<class kind="class">QRectF</class>
<class kind="class">VersionListView</class>
<class kind="class">PrismExternalUpdater</class>
<class kind="class">MojangVersionFormat</class>
<class kind="class">OneSixVersionFormat</class>
<class kind="class">CURRENT_MINIMUM_LAUNCHER_VERSION</class>
<class kind="class">MultiMatcher</class>
<class kind="class">OrSetting</class>
<class kind="class">RemoteLoadStatus</class>
<class kind="class">ComponentContainer</class>
<class kind="class">ComponentIndex</class>
<class kind="class">overload</class>
<class kind="class">overload</class>
<class kind="class">currentComponentsFileVersion</class>
<class kind="class">QMetaType</class>
<class kind="class">WorldMimeData</class>
<class kind="class">s_pack_format_versions</class>
<class kind="class">s_pack_format_versions</class>
<class kind="class">nullopt</class>
<class kind="class">optional</class>
<class kind="class">s_update_task_mutex</class>
<class kind="class">newlineRegex</class>
<class kind="class">s_packed_type_names</class>
<class kind="class">ImgurUpload</class>
<class kind="class">QSettings</class>
<class kind="class">laxCompare</class>
<class kind="class">POEntry</class>
<class kind="class">ParserArray</class>
<class kind="class">JProfilerFactory</class>
<class kind="class">JProfiler</class>
<class kind="class">JVisualVMFactory</class>
<class kind="class">JVisualVM</class>
<class kind="class">File</class>
<class kind="class">GenericProfilerFactory</class>
<class kind="class">GenericProfiler</class>
<class kind="class">QLatin1String</class>
<class kind="class">defaultLangCode</class>
<class kind="class">FileType</class>
<class kind="class">QLocale</class>
<class kind="class">InstallJavaPage</class>
<class kind="class">modrinth_api</class>
<class kind="class">flame_api</class>
<class kind="class">api</class>
<class kind="class">api</class>
<class kind="class">flameAPI</class>
<class kind="class">modrinthAPI</class>
<class kind="class">api</class>
<class kind="class">api</class>
<class kind="class">api</class>
<class kind="class">ApplicationMessage</class>
<class kind="class">api</class>
<class kind="class">MaxMclogsLines</class>
<class kind="class">InitialMclogsLines</class>
<class kind="class">FinalMclogsLines</class>
<class kind="class">SimplePrefixMatcher</class>
<class kind="class">QAccessibleInterface</class>
<class kind="class">CatPack</class>
<class kind="class">BasicCatPack</class>
<class kind="class">FileCatPack</class>
<class kind="class">QDate</class>
<class kind="class">JsonCatPack</class>
<class kind="class">LogColors</class>
<class kind="class">QPalette</class>
<class kind="class">qreal</class>
<class kind="class">liveCheckFile</class>
<class kind="class">QtMsgType</class>
<class kind="class">QMessageLogContext</class>
<class kind="class">Ui_PasteWizardPage</class>
<class kind="class">QAbstractSpinBox</class>
<class kind="class">FusionTheme</class>
<class kind="class">Ui_AutoJavaWizardPage</class>
<class kind="class">Ui_ThemeWizardPage</class>
<class kind="class">Ui_ThemeCustomizationWidget</class>
<class kind="class">BrightTheme</class>
<class kind="class">DarkTheme</class>
<class kind="class">Ui_LoginWizardPage</class>
<class kind="class">CustomTheme</class>
<class kind="class">themeFile</class>
<class kind="class">SystemTheme</class>
<class kind="class">S_NATIVE_STYLES</class>
<class kind="class">Ui_MainWindow</class>
<class kind="class">Ui_GameOptionsPage</class>
<class kind="class">Ui_NotesPage</class>
<class kind="class">Ui_LogPage</class>
<class kind="class">QFont</class>
<class kind="class">Ui_VersionPage</class>
<class kind="class">IconProxy</class>
<class kind="class">Ui_OtherLogsPage</class>
<class kind="class">Ui_ManagedPackPage</class>
<class kind="class">NoBigComboBoxStyle</class>
<class kind="class">Ui_ServersPage</class>
<class kind="class">COLUMN_COUNT</class>
<class kind="class">Ui_WorldListPage</class>
<class kind="class">WorldListProxyModel</class>
<class kind="class">Ui_ScreenshotsPage</class>
<class kind="class">SharedIconCache</class>
<class kind="class">SharedIconCachePtr</class>
<class kind="class">ThumbnailingResult</class>
<class kind="class">ThumbnailRunnable</class>
<class kind="class">FilterModel</class>
<class kind="class">CenteredEditingDelegate</class>
<class kind="class">Ui_AccountListPage</class>
<class kind="class">Ui_ExternalToolsPage</class>
<class kind="class">Ui_ProxyPage</class>
<class kind="class">Ui_JavaPage</class>
<class kind="class">Ui_LauncherPage</class>
<class kind="class">InstSortMode</class>
<class kind="class">InstRenamingMode</class>
<class kind="class">Ui_APIPage</class>
<class kind="class">Ui_CustomPage</class>
<class kind="class">s_availableVersions</class>
<class kind="class">Ui_AtlOptionalModDialog</class>
<class kind="class">Ui_AtlPage</class>
<class kind="class">Ui_OptionalModDialog</class>
<class kind="class">Ui_FlamePage</class>
<class kind="class">api</class>
<class kind="class">Ui_ProfileSelectDialog</class>
<class kind="class">Ui_ProfileSetupDialog</class>
<class kind="class">QJsonParseError</class>
<class kind="class">Ui_TechnicPage</class>
<class kind="class">Ui_ModrinthPage</class>
<class kind="class">Ui_ImportPage</class>
<class kind="class">QValidator</class>
<class kind="class">QValidatorPrivate</class>
<class kind="class">QObjectPrivate</class>
<class kind="class">UrlValidator</class>
<class kind="class">Ui_CopyInstanceDialog</class>
<class kind="class">Ui_AboutDialog</class>
<class kind="class">Ui_OfflineLoginDialog</class>
<class kind="class">Ui_NewsDialog</class>
<class kind="class">Ui_ImportResourceDialog</class>
<class kind="class">Ui_ProgressDialog</class>
<class kind="class">Ui_MSALoginDialog</class>
<class kind="class">Ui_ExportInstanceDialog</class>
<class kind="class">Ui_ExportToModListDialog</class>
<class kind="class">Ui_IconPickerDialog</class>
<class kind="class">Ui_ExportPackDialog</class>
<class kind="class">Ui_ReviewMessageBox</class>
<class kind="class">Ui_ScrollMessageBox</class>
<class kind="class">Ui_NewComponentDialog</class>
<class kind="class">Ui_ChooseProviderDialog</class>
<class kind="class">QVector4D</class>
<class kind="class">QVector2D</class>
<class kind="class">VertexData</class>
<class kind="class">vertices</class>
<class kind="class">GLushort</class>
<class kind="class">indices</class>
<class kind="class">planeVertices</class>
<class kind="class">planeIndices</class>
<class kind="class">QMatrix4x4</class>
<class kind="class">QOpenGLTexture</class>
<class kind="class">Ui_BlockedModsDialog</class>
<class kind="class">Ui_NewInstanceDialog</class>
<class kind="class">QTextLayout</class>
<class kind="class">Ui_CustomCommands</class>
<class kind="class">CheckComboModel</class>
<class kind="class">Ui_EnvironmentVariables</class>
<class kind="class">InstallLoaderPage</class>
<class kind="class">Ui_InfoFrame</class>
<class kind="class">Ui_SkinManageDialog</class>
<class kind="class">WaitTask</class>
<class kind="class">pageIconSize</class>
<class kind="class">PageViewDelegate</class>
<class kind="class">PageView</class>
<class kind="class">PageEntryFilterModel</class>
<class kind="class">Ui_SubTaskProgressBar</class>
<class kind="class">ActionButton</class>
<class kind="class">QAccessibleTableCell</class>
<class kind="class">QAccessibleTableHeaderCell</class>
<class kind="class">QAccessibleTableInterface</class>
<class kind="class">QAccessibleObject</class>
<class kind="class">QAccessible</class>
<class kind="class">QAccessibleEvent</class>
<class kind="class">QAccessibleTableModelChangeEvent</class>
<class kind="class">AccessibleInstanceView</class>
<class kind="class">QAccessibleTableCellInterface</class>
<class kind="class">QAccessibleActionInterface</class>
<class kind="class">AccessibleInstanceViewItem</class>
<class kind="class">Ui_ModFilterWidget</class>
<class kind="class">VersionBasicModel</class>
<class kind="class">AllVersionProxyModel</class>
<class kind="class">Ui_MinecraftSettingsWidget</class>
<class kind="class">Ui_JavaSettingsWidget</class>
<class kind="class">Ui_UpdateAvailableDialog</class>
<class kind="class">LocaleString</class>
<class kind="class">FormatProperties</class>
<class kind="class">NoReturnTextEdit</class>
<member kind="function">
<type>shared_qobject_ptr&lt;T&gt;</type>
<name>makeShared</name>
<anchorfile>makeShared.adoc</anchorfile>
<anchor/>
<arglist>(...Args args)</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskLogC</name>
<anchorfile>taskLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>InstanceNameChange</type>
<name>askForChangingInstanceName</name>
<anchorfile>askForChangingInstanceName.adoc</anchorfile>
<anchor/>
<arglist>(QWidget* parent, const QString&amp; old_name, const QString&amp; new_name)</arglist>
</member>
<member kind="function">
<type>ShouldUpdate</type>
<name>askIfShouldUpdate</name>
<anchorfile>askIfShouldUpdate.adoc</anchorfile>
<anchor/>
<arglist>(QWidget* parent, QString original_version_name)</arglist>
</member>
<member kind="function">
<type>QChar</type>
<name>getNextChar</name>
<anchorfile>getNextChar.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; s, int location)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>readLonglink</name>
<anchorfile>readLonglink.adoc</anchorfile>
<anchor/>
<arglist>(QIODevice* in, qint64 size, QByteArray&amp; longlink)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>getOctal</name>
<anchorfile>getOctal.adoc</anchorfile>
<anchor/>
<arglist>(char* buffer, int maxlenght, bool* ok)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>decodeName</name>
<anchorfile>decodeName.adoc</anchorfile>
<anchor/>
<arglist>(char* name)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>clamp</name>
<anchorfile>clamp.adoc</anchorfile>
<anchor/>
<arglist>(T&amp; current, T min, T max)</arglist>
</member>
<member kind="function">
<type>QMap&lt;InstanceId, InstanceLocator&gt;</type>
<name>getIdMapping</name>
<anchorfile>getIdMapping.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;InstancePtr&gt;&amp; list)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>askToUpdateInstanceDirName</name>
<anchorfile>askToUpdateInstanceDirName.adoc</anchorfile>
<anchor/>
<arglist>(InstancePtr instance, const QString&amp; oldName, const QString&amp; newName, QWidget* parent)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>checkLinkedInstances</name>
<anchorfile>checkLinkedInstances.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id, QWidget* parent, const QString&amp; verb)</arglist>
</member>
<member kind="function">
<type>QDebug</type>
<name>operator&lt;&lt;</name>
<anchorfile>operator_lshift-0e.adoc</anchorfile>
<anchor/>
<arglist>(QDebug debug, const Version&amp; v)</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskNetLogC</name>
<anchorfile>taskNetLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskDownloadLogC</name>
<anchorfile>taskDownloadLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskUploadLogC</name>
<anchorfile>taskUploadLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskMCSkinsLogC</name>
<anchorfile>taskMCSkinsLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskMetaCacheLogC</name>
<anchorfile>taskMetaCacheLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>taskHttpMetaCacheLogC</name>
<anchorfile>taskHttpMetaCacheLogC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator|</name>
<anchorfile>operator_bitor-09.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator|</name>
<anchorfile>operator_bitor-00.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator&amp;</name>
<anchorfile>operator_bitand-02.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator&amp;</name>
<anchorfile>operator_bitand-08.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator^</name>
<anchorfile>operator_xor-09.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;Net::NetRequest::Options::enum_type&gt;</type>
<name>operator^</name>
<anchorfile>operator_xor-05.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-0b.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-06.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-02.adoc</anchorfile>
<anchor/>
<arglist>(int f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-06.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0c.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-05.adoc</anchorfile>
<anchor/>
<arglist>(int f1, QFlags&lt;Net::NetRequest::Options::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-00e.adoc</anchorfile>
<anchor/>
<arglist>(int f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-09.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-00.adoc</anchorfile>
<anchor/>
<arglist>(int f1, Net::NetRequest::Options::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0b.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>QIncompatibleFlag</type>
<name>operator|</name>
<anchorfile>operator_bitor-0a.adoc</anchorfile>
<anchor/>
<arglist>(Net::NetRequest::Options::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>QDebug</type>
<name>operator&lt;&lt;</name>
<anchorfile>operator_lshift-0a.adoc</anchorfile>
<anchor/>
<arglist>(QDebug debug, const BlockedMod&amp; m)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>stripVariableEntries</name>
<anchorfile>stripVariableEntries.adoc</anchorfile>
<anchor/>
<arglist>(QString name, QString target, QString remove)</arglist>
</member>
<member kind="function">
<type>QProcessEnvironment</type>
<name>CleanEnviroment</name>
<anchorfile>CleanEnviroment.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>getMinecraftJavaBundle</name>
<anchorfile>getMinecraftJavaBundle.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>getPrismJavaBundle</name>
<anchorfile>getPrismJavaBundle.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>childValue</name>
<anchorfile>childValue.adoc</anchorfile>
<anchor/>
<arglist>(const QDomElement&amp; element, const QString&amp; childName, QString defaultVal)</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>instanceProfileC</name>
<anchorfile>instanceProfileC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const QLoggingCategory&amp;</type>
<name>instanceProfileResolveC</name>
<anchorfile>instanceProfileResolveC.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>expandVariables</name>
<anchorfile>expandVariables.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; input, QProcessEnvironment dict)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getAccountStatus</name>
<anchorfile>getAccountStatus.adoc</anchorfile>
<anchor/>
<arglist>(AccountState status)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isSchemeHandlerRegistered</name>
<anchorfile>isSchemeHandlerRegistered.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>DeviceAuthorizationResponse</type>
<name>parseDeviceAuthorizationResponse</name>
<anchorfile>parseDeviceAuthorizationResponse.adoc</anchorfile>
<anchor/>
<arglist>(const QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>AuthenticationResponse</type>
<name>parseAuthenticationResponse</name>
<anchorfile>parseAuthenticationResponse.adoc</anchorfile>
<anchor/>
<arglist>(const QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>QList&lt;std::shared_ptr&lt;Rule&gt;&gt;</type>
<name>rulesFromJsonV4</name>
<anchorfile>rulesFromJsonV4.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; objectWithRules)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>replaceSuffix</name>
<anchorfile>replaceSuffix.adoc</anchorfile>
<anchor/>
<arglist>(QString target, const QString&amp; suffix, const QString&amp; replacement)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>unzipNatives</name>
<anchorfile>unzipNatives.adoc</anchorfile>
<anchor/>
<arglist>(QString source, QString targetFolder, bool applyJnilibHack)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>applyString</name>
<anchorfile>applyString.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; from, QString&amp; to)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>findLibraryByName</name>
<anchorfile>findLibraryByName.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;LibraryPtr&gt;* haystack, const GradleSpecifier&amp; needle)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator|</name>
<anchorfile>operator_bitor-0b.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator|</name>
<anchorfile>operator_bitor-0d.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator&amp;</name>
<anchorfile>operator_bitand-0b.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator&amp;</name>
<anchorfile>operator_bitand-0d.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator^</name>
<anchorfile>operator_xor-07.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>QFlags&lt;VisualGroup::HitResults::enum_type&gt;</type>
<name>operator^</name>
<anchorfile>operator_xor-0c.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-0a.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-01.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-0d0.adoc</anchorfile>
<anchor/>
<arglist>(int f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0de3.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0e.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0d9.adoc</anchorfile>
<anchor/>
<arglist>(int f1, QFlags&lt;VisualGroup::HitResults::enum_type&gt; f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-00b.adoc</anchorfile>
<anchor/>
<arglist>(int f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator+</name>
<anchorfile>operator_plus-0d5.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-07.adoc</anchorfile>
<anchor/>
<arglist>(int f1, VisualGroup::HitResults::enum_type f2)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>operator-</name>
<anchorfile>operator_minus-0dee.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>QIncompatibleFlag</type>
<name>operator|</name>
<anchorfile>operator_bitor-01.adoc</anchorfile>
<anchor/>
<arglist>(VisualGroup::HitResults::enum_type f1, int f2)</arglist>
</member>
<member kind="function">
<type>QDateTime</type>
<name>timeFromS3Time</name>
<anchorfile>timeFromS3Time.adoc</anchorfile>
<anchor/>
<arglist>(QString str)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>timeToS3Time</name>
<anchorfile>timeToS3Time.adoc</anchorfile>
<anchor/>
<arglist>(QDateTime time)</arglist>
</member>
<member kind="function">
<type>RuleAction</type>
<name>RuleAction_fromString</name>
<anchorfile>RuleAction_fromString.adoc</anchorfile>
<anchor/>
<arglist>(QString name)</arglist>
</member>
<member kind="function">
<type>MojangAssetIndexInfo::Ptr</type>
<name>assetIndexFromJson</name>
<anchorfile>assetIndexFromJson.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>MojangDownloadInfo::Ptr</type>
<name>downloadInfoFromJson</name>
<anchorfile>downloadInfoFromJson.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>MojangLibraryDownloadInfo::Ptr</type>
<name>libDownloadInfoFromJson</name>
<anchorfile>libDownloadInfoFromJson.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; libObj)</arglist>
</member>
<member kind="function">
<type>QJsonObject</type>
<name>assetIndexToJson</name>
<anchorfile>assetIndexToJson.adoc</anchorfile>
<anchor/>
<arglist>(MojangAssetIndexInfo::Ptr assetidxinfo)</arglist>
</member>
<member kind="function">
<type>QJsonObject</type>
<name>libDownloadInfoToJson</name>
<anchorfile>libDownloadInfoToJson.adoc</anchorfile>
<anchor/>
<arglist>(MojangLibraryDownloadInfo::Ptr libinfo)</arglist>
</member>
<member kind="function">
<type>QJsonObject</type>
<name>downloadInfoToJson</name>
<anchorfile>downloadInfoToJson.adoc</anchorfile>
<anchor/>
<arglist>(MojangDownloadInfo::Ptr info)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>readString</name>
<anchorfile>readString.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; root, const QString&amp; key, QString&amp; variable)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>deepCompare</name>
<anchorfile>deepCompare.adoc</anchorfile>
<anchor/>
<arglist>(const std::set&lt;Meta::Require&gt;&amp; a, const std::set&lt;Meta::Require&gt;&amp; b)</arglist>
</member>
<member kind="function">
<type>QDebug</type>
<name>operator&lt;&lt;</name>
<anchorfile>operator_lshift-09.adoc</anchorfile>
<anchor/>
<arglist>(QDebug d, const Component&amp; comp)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>switcherooSetupGPU</name>
<anchorfile>switcherooSetupGPU.adoc</anchorfile>
<anchor/>
<arglist>(QProcessEnvironment&amp; env)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>replaceTokensIn</name>
<anchorfile>replaceTokensIn.adoc</anchorfile>
<anchor/>
<arglist>(QString text, QMap&lt;QString, QString&gt; with)</arglist>
</member>
<member kind="function">
<type>RequireCompositionResult</type>
<name>composeRequirement</name>
<anchorfile>composeRequirement.adoc</anchorfile>
<anchor/>
<arglist>(const RequireEx&amp; a, const RequireEx&amp; b)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>gatherRequirementsFromComponents</name>
<anchorfile>gatherRequirementsFromComponents.adoc</anchorfile>
<anchor/>
<arglist>(const ComponentContainer&amp; input, RequireExSet&amp; output)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>getTrivialRemovals</name>
<anchorfile>getTrivialRemovals.adoc</anchorfile>
<anchor/>
<arglist>(const ComponentContainer&amp; components, const RequireExSet&amp; reqs, QStringList&amp; toRemove)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>getTrivialComponentChanges</name>
<anchorfile>getTrivialComponentChanges.adoc</anchorfile>
<anchor/>
<arglist>(const ComponentIndex&amp; index, const RequireExSet&amp; input, RequireExSet&amp; toAdd, RequireExSet&amp; toChange)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isMinecraftVersion</name>
<anchorfile>isMinecraftVersion.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; uid)</arglist>
</member>
<member kind="function">
<type>QJsonObject</type>
<name>componentToJsonV1</name>
<anchorfile>componentToJsonV1.adoc</anchorfile>
<anchor/>
<arglist>(ComponentPtr component)</arglist>
</member>
<member kind="function">
<type>ComponentPtr</type>
<name>componentFromJsonV1</name>
<anchorfile>componentFromJsonV1.adoc</anchorfile>
<anchor/>
<arglist>(PackProfile* parent, const QString&amp; componentJsonPattern, const QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>savePackProfile</name>
<anchorfile>savePackProfile.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; filename, const ComponentContainer&amp; container)</arglist>
</member>
<member kind="function">
<type>PackProfile::Result</type>
<name>loadPackProfile</name>
<anchorfile>loadPackProfile.adoc</anchorfile>
<anchor/>
<arglist>(PackProfile* parent, const QString&amp; filename, const QString&amp; componentJsonPattern, ComponentContainer&amp; container)</arglist>
</member>
<member kind="function">
<type>std::tuple&lt;QString, qint64&gt;</type>
<name>calculateFileSize</name>
<anchorfile>calculateFileSize.adoc</anchorfile>
<anchor/>
<arglist>(const QFileInfo&amp; file)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>removeThePrefix</name>
<anchorfile>removeThePrefix.adoc</anchorfile>
<anchor/>
<arglist>(QString&amp; string)</arglist>
</member>
<member kind="function">
<type>std::unique_ptr&lt;nbt::tag_compound&gt;</type>
<name>parseLevelDat</name>
<anchorfile>parseLevelDat.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray data)</arglist>
</member>
<member kind="function">
<type>QByteArray</type>
<name>serializeLevelDat</name>
<anchorfile>serializeLevelDat.adoc</anchorfile>
<anchor/>
<arglist>(nbt::tag_compound* levelInfo)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getLevelDatFromFS</name>
<anchorfile>getLevelDatFromFS.adoc</anchorfile>
<anchor/>
<arglist>(const QFileInfo&amp; file)</arglist>
</member>
<member kind="function">
<type>QByteArray</type>
<name>getLevelDatDataFromFS</name>
<anchorfile>getLevelDatDataFromFS.adoc</anchorfile>
<anchor/>
<arglist>(const QFileInfo&amp; file)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>putLevelDatDataToFS</name>
<anchorfile>putLevelDatDataToFS.adoc</anchorfile>
<anchor/>
<arglist>(const QFileInfo&amp; file, QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>int64_t</type>
<name>calculateWorldSize</name>
<anchorfile>calculateWorldSize.adoc</anchorfile>
<anchor/>
<arglist>(const QFileInfo&amp; file)</arglist>
</member>
<member kind="function">
<type>QImage</type>
<name>improveSkin</name>
<anchorfile>improveSkin.adoc</anchorfile>
<anchor/>
<arglist>(const QImage&amp; skin)</arglist>
</member>
<member kind="function">
<type>QImage</type>
<name>getSkin</name>
<anchorfile>getSkin.adoc</anchorfile>
<anchor/>
<arglist>(const QString path)</arglist>
</member>
<member kind="function">
<type>QImage</type>
<name>generatePreviews</name>
<anchorfile>generatePreviews.adoc</anchorfile>
<anchor/>
<arglist>(QImage texture, bool slim)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>unescape</name>
<anchorfile>unescape.adoc</anchorfile>
<anchor/>
<arglist>(QString orig)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>unquote</name>
<anchorfile>unquote.adoc</anchorfile>
<anchor/>
<arglist>(QString str)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>parseOldFileFormat</name>
<anchorfile>parseOldFileFormat.adoc</anchorfile>
<anchor/>
<arglist>(QIODevice&amp; device, QSettings::SettingsMap&amp; map)</arglist>
</member>
<member kind="function">
<type>Version</type>
<name>mcVersion</name>
<anchorfile>mcVersion.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance* inst)</arglist>
</member>
<member kind="function">
<type>ModPlatform::ModLoaderTypes</type>
<name>mcLoaders</name>
<anchorfile>mcLoaders.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance* inst)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>checkDependencies</name>
<anchorfile>checkDependencies.adoc</anchorfile>
<anchor/>
<arglist>(std::shared_ptr&lt;GetModDependenciesTask::PackDependency&gt; sel, Version mcVersion, ModPlatform::ModLoaderTypes loaders)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>sortJavas</name>
<anchorfile>sortJavas.adoc</anchorfile>
<anchor/>
<arglist>(BaseVersion::Ptr left, BaseVersion::Ptr right)</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>addJavasFromEnv</name>
<anchorfile>addJavasFromEnv.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;QString&gt; javas)</arglist>
</member>
<member kind="function">
<type>InstallJavaPage*</type>
<name>pageCast</name>
<anchorfile>pageCast-05.adoc</anchorfile>
<anchor/>
<arglist>(BasePage* page)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadFileV1</name>
<anchorfile>loadFileV1.adoc</anchorfile>
<anchor/>
<arglist>(Flame::File&amp; f, QJsonObject&amp; file)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadModloaderV1</name>
<anchorfile>loadModloaderV1.adoc</anchorfile>
<anchor/>
<arglist>(Flame::Modloader&amp; m, QJsonObject&amp; modLoader)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadMinecraftV1</name>
<anchorfile>loadMinecraftV1.adoc</anchorfile>
<anchor/>
<arglist>(Flame::Minecraft&amp; m, QJsonObject&amp; minecraft)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadManifestV1</name>
<anchorfile>loadManifestV1.adoc</anchorfile>
<anchor/>
<arglist>(Flame::Manifest&amp; pack, QJsonObject&amp; manifest)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>enumToString</name>
<anchorfile>enumToString.adoc</anchorfile>
<anchor/>
<arglist>(int hash_algorithm)</arglist>
</member>
<member kind="function">
<type>PackedResourceType</type>
<name>getResourceType</name>
<anchorfile>getResourceType.adoc</anchorfile>
<anchor/>
<arglist>(int classId)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>shouldDownloadOnSide</name>
<anchorfile>shouldDownloadOnSide.adoc</anchorfile>
<anchor/>
<arglist>(QString side)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadIndexedVersion</name>
<anchorfile>loadIndexedVersion.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::IndexedVersion&amp; v, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>ATLauncher::DownloadType</type>
<name>parseDownloadType</name>
<anchorfile>parseDownloadType.adoc</anchorfile>
<anchor/>
<arglist>(QString rawType)</arglist>
</member>
<member kind="function">
<type>ATLauncher::ModType</type>
<name>parseModType</name>
<anchorfile>parseModType.adoc</anchorfile>
<anchor/>
<arglist>(QString rawType)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionLoader</name>
<anchorfile>loadVersionLoader.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionLoader&amp; p, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionLibrary</name>
<anchorfile>loadVersionLibrary.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionLibrary&amp; p, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionConfigs</name>
<anchorfile>loadVersionConfigs.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionConfigs&amp; p, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionMod</name>
<anchorfile>loadVersionMod.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionMod&amp; p, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionMessages</name>
<anchorfile>loadVersionMessages.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionMessages&amp; m, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionMainClass</name>
<anchorfile>loadVersionMainClass.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::PackVersionMainClass&amp; m, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionExtraArguments</name>
<anchorfile>loadVersionExtraArguments.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::PackVersionExtraArguments&amp; a, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionKeep</name>
<anchorfile>loadVersionKeep.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionKeep&amp; k, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionKeeps</name>
<anchorfile>loadVersionKeeps.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionKeeps&amp; k, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionDelete</name>
<anchorfile>loadVersionDelete.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionDelete&amp; d, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadVersionDeletes</name>
<anchorfile>loadVersionDeletes.adoc</anchorfile>
<anchor/>
<arglist>(ATLauncher::VersionDeletes&amp; d, QJsonObject&amp; obj)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>markdownToHTML</name>
<anchorfile>markdownToHTML.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; markdown)</arglist>
</member>
<member kind="function">
<type>IconType</type>
<name>operator--</name>
<anchorfile>operator_dec.adoc</anchorfile>
<anchor/>
<arglist>(IconType&amp; t, int )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>formatName</name>
<anchorfile>formatName.adoc</anchorfile>
<anchor/>
<arglist>(const QDir&amp; iconsDir, const QFileInfo&amp; iconFile)</arglist>
</member>
<member kind="function">
<type>QSet&lt;QString&gt;</type>
<name>toStringSet</name>
<anchorfile>toStringSet.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;QString&gt;&amp; list)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>truncateLogForMclogs</name>
<anchorfile>truncateLogForMclogs.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; logContent)</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>BrowseForFileInternal</name>
<anchorfile>BrowseForFileInternal.adoc</anchorfile>
<anchor/>
<arglist>(QString context, QString caption, QString filter, QString defaultPath, QWidget* parentWidget, bool single)</arglist>
</member>
<member kind="function">
<type>QAccessibleInterface*</type>
<name>groupViewAccessibleFactory</name>
<anchorfile>groupViewAccessibleFactory.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; classname, QObject* object)</arglist>
</member>
<member kind="function">
<type>auto</type>
<name>themeDebugLog</name>
<anchorfile>themeDebugLog.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>auto</type>
<name>themeWarningLog</name>
<anchorfile>themeWarningLog.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>std::tuple&lt;QDateTime, QString, QString, QString, QString&gt;</type>
<name>read_lock_File</name>
<anchorfile>read_lock_File.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; path)</arglist>
</member>
<member kind="function">
<type>QList&lt;int&gt;</type>
<name>stringToIntList</name>
<anchorfile>stringToIntList.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; string)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>intListToString</name>
<anchorfile>intListToString.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;int&gt;&amp; list)</arglist>
</member>
<member kind="function">
<type>JsonCatPack::PartialDate</type>
<name>partialDate</name>
<anchorfile>partialDate.adoc</anchorfile>
<anchor/>
<arglist>(QJsonObject date)</arglist>
</member>
<member kind="function">
<type>QDate</type>
<name>ensureDay</name>
<anchorfile>ensureDay.adoc</anchorfile>
<anchor/>
<arglist>(int year, int month, int day)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>findNext</name>
<anchorfile>findNext.adoc</anchorfile>
<anchor/>
<arglist>(QPlainTextEdit* _this, const QString&amp; what, bool reverse)</arglist>
</member>
<member kind="function">
<type>unsigned int</type>
<name>getOnlinePlayers</name>
<anchorfile>getOnlinePlayers.adoc</anchorfile>
<anchor/>
<arglist>(QJsonObject data)</arglist>
</member>
<member kind="function">
<type>std::unique_ptr&lt;nbt::tag_compound&gt;</type>
<name>parseServersDat</name>
<anchorfile>parseServersDat.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; filename)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>serializeServerDat</name>
<anchorfile>serializeServerDat.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; filename, nbt::tag_compound* levelInfo)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>checkVersionFilters</name>
<anchorfile>checkVersionFilters-01.adoc</anchorfile>
<anchor/>
<arglist>(const Flame::IndexedVersion&amp; v, std::shared_ptr&lt;ModFilterWidget::Filter&gt; filter)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>checkVersionFilters</name>
<anchorfile>checkVersionFilters-0a.adoc</anchorfile>
<anchor/>
<arglist>(const Modrinth::ModpackVersion&amp; v, std::shared_ptr&lt;ModFilterWidget::Filter&gt; filter)</arglist>
</member>
<member kind="function">
<type>std::tuple&lt;int, int&gt;</type>
<name>map_int_zero_max</name>
<anchorfile>map_int_zero_max.adoc</anchorfile>
<anchor/>
<arglist>(T current, T range_max, T range_min)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>SaveIcon</name>
<anchorfile>SaveIcon.adoc</anchorfile>
<anchor/>
<arglist>(InstancePtr m_instance)</arglist>
</member>
<member kind="function">
<type>QVector&lt;QVector4D&gt;</type>
<name>transformVectors</name>
<anchorfile>transformVectors.adoc</anchorfile>
<anchor/>
<arglist>(const QMatrix4x4&amp; matrix, const QVector&lt;QVector4D&gt;&amp; vectors)</arglist>
</member>
<member kind="function">
<type>QVector&lt;QVector2D&gt;</type>
<name>getCubeUVs</name>
<anchorfile>getCubeUVs.adoc</anchorfile>
<anchor/>
<arglist>(float u, float v, float width, float height, float depth, float textureWidth, float textureHeight)</arglist>
</member>
<member kind="function">
<type>QColor</type>
<name>calculateContrastingColor</name>
<anchorfile>calculateContrastingColor.adoc</anchorfile>
<anchor/>
<arglist>(const QColor&amp; color)</arglist>
</member>
<member kind="function">
<type>QImage</type>
<name>generateChessboardImage</name>
<anchorfile>generateChessboardImage.adoc</anchorfile>
<anchor/>
<arglist>(int width, int height, int tileSize, QColor baseColor)</arglist>
</member>
<member kind="function">
<type>QList&lt;std::pair&lt;qreal, QString&gt;&gt;</type>
<name>viewItemTextLayout</name>
<anchorfile>viewItemTextLayout-04.adoc</anchorfile>
<anchor/>
<arglist>(QTextLayout&amp; textLayout, int lineWidth, qreal&amp; height)</arglist>
</member>
<member kind="function">
<type>InstallLoaderPage*</type>
<name>pageCast</name>
<anchorfile>pageCast-04.adoc</anchorfile>
<anchor/>
<arglist>(BasePage* page)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setupLinkToolTip</name>
<anchorfile>setupLinkToolTip.adoc</anchorfile>
<anchor/>
<arglist>(QLabel* label)</arglist>
</member>
<member kind="function">
<type>QPixmap</type>
<name>previewCape</name>
<anchorfile>previewCape.adoc</anchorfile>
<anchor/>
<arglist>(QImage capeImage)</arglist>
</member>
<member kind="function">
<type>std::list&lt;Version&gt;</type>
<name>mcVersions</name>
<anchorfile>mcVersions.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance* inst)</arglist>
</member>
<member kind="function">
<type>QList&lt;ModPlatform::ModLoaderType&gt;</type>
<name>mcLoadersList</name>
<anchorfile>mcLoadersList.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance* inst)</arglist>
</member>
<member kind="function">
<type>ModPlatform::ResourceProvider</type>
<name>next</name>
<anchorfile>next.adoc</anchorfile>
<anchor/>
<arglist>(ModPlatform::ResourceProvider p)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>copyAction</name>
<anchorfile>copyAction.adoc</anchorfile>
<anchor/>
<arglist>(QAction* from, QAction* to)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>listsIntersect</name>
<anchorfile>listsIntersect.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;T&gt;&amp; l1, const QList&lt;T&gt; t2)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>operator&lt;</name>
<anchorfile>operator_lt.adoc</anchorfile>
<anchor/>
<arglist>(const LocaleString&amp; lhs, const LocaleString&amp; rhs)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>viewItemTextLayout</name>
<anchorfile>viewItemTextLayout-0e.adoc</anchorfile>
<anchor/>
<arglist>(QTextLayout&amp; textLayout, int lineWidth, qreal&amp; height, qreal&amp; widthUsed)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>drawSelectionRect</name>
<anchorfile>drawSelectionRect.adoc</anchorfile>
<anchor/>
<arglist>(QPainter* painter, const QStyleOptionViewItem&amp; option, const QRect&amp; rect)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>drawFocusRect</name>
<anchorfile>drawFocusRect.adoc</anchorfile>
<anchor/>
<arglist>(QPainter* painter, const QStyleOptionViewItem&amp; option, const QRect&amp; rect)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>drawProgressOverlay</name>
<anchorfile>drawProgressOverlay.adoc</anchorfile>
<anchor/>
<arglist>(QPainter* painter, const QStyleOptionViewItem&amp; option, const int value, const int maximum)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>drawBadges</name>
<anchorfile>drawBadges.adoc</anchorfile>
<anchor/>
<arglist>(QPainter* painter, const QStyleOptionViewItem&amp; option, BaseInstance* instance, QIcon::Mode mode, QIcon::State state)</arglist>
</member>
<member kind="function">
<type>QSize</type>
<name>viewItemTextSize</name>
<anchorfile>viewItemTextSize.adoc</anchorfile>
<anchor/>
<arglist>(const QStyleOptionViewItem* option)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>main</name>
<anchorfile>main.adoc</anchorfile>
<anchor/>
<arglist>(int argc, char*[] argv)</arglist>
</member>
</compound>
<compound kind="class">
<name>QString</name>
<filename>QString.adoc</filename>
</compound>
<compound kind="namespace">
<name>MessageLevel</name>
<filename>MessageLevel.adoc</filename>
<class kind="class">MessageLevel::Enum</class>
<member kind="function">
<type>MessageLevel::Enum</type>
<name>getLevel</name>
<anchorfile>MessageLevel/getLevel.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; levelName)</arglist>
</member>
<member kind="function">
<type>MessageLevel::Enum</type>
<name>fromLine</name>
<anchorfile>MessageLevel/fromLine.adoc</anchorfile>
<anchor/>
<arglist>(QString&amp; line)</arglist>
</member>
</compound>
<compound kind="class">
<name>MessageLevel::Enum</name>
<filename>MessageLevel/Enum.adoc</filename>
</compound>
<compound kind="class">
<name>QObject</name>
<filename>QObject.adoc</filename>
</compound>
<compound kind="class">
<name>QIODeviceBase</name>
<filename>QIODeviceBase.adoc</filename>
</compound>
<compound kind="class">
<name>QIODevice</name>
<filename>QIODevice.adoc</filename>
</compound>
<compound kind="class">
<name>QProcess</name>
<filename>QProcess.adoc</filename>
</compound>
<compound kind="class">
<name>QMetaObject</name>
<filename>QMetaObject.adoc</filename>
</compound>
<compound kind="class">
<name>QStringConverterBase</name>
<filename>QStringConverterBase.adoc</filename>
</compound>
<compound kind="class">
<name>QTextCodec</name>
<filename>QTextCodec.adoc</filename>
</compound>
<compound kind="class">
<name>QListSpecialMethodsBase</name>
<filename>QListSpecialMethodsBase.adoc</filename>
</compound>
<compound kind="class">
<name>QListSpecialMethods</name>
<filename>QListSpecialMethods.adoc</filename>
</compound>
<compound kind="class">
<name>QList</name>
<filename>QList.adoc</filename>
</compound>
<compound kind="class">
<name>QStringList</name>
<filename>QStringList.adoc</filename>
</compound>
<compound kind="class">
<name>LoggedProcess</name>
<filename>LoggedProcess.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>LoggedProcess/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>LoggedProcess/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>LoggedProcess/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>LoggedProcess/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>LoggedProcess</name>
<anchorfile>LoggedProcess/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(const QTextCodec* output_codec, QObject* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~LoggedProcess</name>
<anchorfile>LoggedProcess/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>LoggedProcess::State</type>
<name>state</name>
<anchorfile>LoggedProcess/state.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>int</type>
<name>exitCode</name>
<anchorfile>LoggedProcess/exitCode.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setDetachable</name>
<anchorfile>LoggedProcess/setDetachable.adoc</anchorfile>
<anchor/>
<arglist>(bool detachable)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>log</name>
<anchorfile>LoggedProcess/log.adoc</anchorfile>
<anchor/>
<arglist>(QStringList lines, MessageLevel::Enum level)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>stateChanged</name>
<anchorfile>LoggedProcess/stateChanged.adoc</anchorfile>
<anchor/>
<arglist>(LoggedProcess::State state)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>kill</name>
<anchorfile>LoggedProcess/kill.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="namespace">
<name>__gnu_cxx</name>
<filename>__gnu_cxx.adoc</filename>
<class kind="class">__gnu_cxx::_Lock_policy</class>
<class kind="class">__gnu_cxx::char_traits</class>
</compound>
<compound kind="class">
<name>__gnu_cxx::_Lock_policy</name>
<filename>__gnu_cxx/_Lock_policy.adoc</filename>
</compound>
<compound kind="class">
<name>__gnu_cxx::char_traits</name>
<filename>__gnu_cxx/char_traits.adoc</filename>
</compound>
<compound kind="namespace">
<name>std</name>
<filename>std.adoc</filename>
<class kind="class">std::__shared_ptr_access</class>
<class kind="class">std::__shared_ptr</class>
<class kind="class">std::shared_ptr</class>
<class kind="class">std::nullptr_t</class>
<class kind="class">std::__weak_ptr</class>
<class kind="class">std::weak_ptr</class>
<class kind="class">std::size_t</class>
<class kind="class">std::enable_shared_from_this</class>
<class kind="class">std::default_delete</class>
<class kind="class">std::unique_ptr</class>
<class kind="class">std::char_traits</class>
<class kind="class">std::__new_allocator</class>
<class kind="class">std::__allocator_base</class>
<class kind="class">std::allocator</class>
<class kind="class">std::string</class>
<class kind="class">std::__pair_base</class>
<class kind="class">std::pair</class>
<class kind="class">std::exception</class>
<class kind="class">std::error_code</class>
<class kind="class">std::function</class>
<class kind="class">std::_Optional_base_impl</class>
<class kind="class">std::_Optional_base</class>
<class kind="class">std::_Enable_copy_move</class>
<class kind="class">std::optional</class>
<class kind="class">std::_Vector_base</class>
<class kind="class">std::vector</class>
<class kind="class">std::__atomic_base</class>
<class kind="class">std::atomic</class>
<class kind="class">std::binary_function</class>
<class kind="class">std::less</class>
<class kind="class">std::set</class>
<class kind="class">std::_Tuple_impl</class>
<class kind="class">std::tuple</class>
<class kind="class">std::array</class>
<class kind="class">std::monostate</class>
<class kind="class">std::variant</class>
<class kind="class">std::nullopt_t</class>
<class kind="class">std::nullopt</class>
</compound>
<compound kind="class">
<name>std::__shared_ptr_access</name>
<filename>std/__shared_ptr_access.adoc</filename>
</compound>
<compound kind="class">
<name>std::__shared_ptr</name>
<filename>std/__shared_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>std::shared_ptr</name>
<filename>std/shared_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>std::nullptr_t</name>
<filename>std/nullptr_t.adoc</filename>
</compound>
<compound kind="class">
<name>std::__weak_ptr</name>
<filename>std/__weak_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>std::weak_ptr</name>
<filename>std/weak_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>std::size_t</name>
<filename>std/size_t.adoc</filename>
</compound>
<compound kind="class">
<name>std::enable_shared_from_this</name>
<filename>std/enable_shared_from_this.adoc</filename>
</compound>
<compound kind="class">
<name>std::default_delete</name>
<filename>std/default_delete.adoc</filename>
</compound>
<compound kind="class">
<name>std::unique_ptr</name>
<filename>std/unique_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>std::char_traits</name>
<filename>std/char_traits.adoc</filename>
</compound>
<compound kind="class">
<name>std::__new_allocator</name>
<filename>std/__new_allocator.adoc</filename>
</compound>
<compound kind="class">
<name>std::__allocator_base</name>
<filename>std/__allocator_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::allocator</name>
<filename>std/allocator.adoc</filename>
</compound>
<compound kind="namespace">
<name>std::__cxx11</name>
<filename>std/__cxx11.adoc</filename>
<class kind="class">std::__cxx11::basic_string</class>
<class kind="class">std::__cxx11::_List_base</class>
<class kind="class">std::__cxx11::list</class>
</compound>
<compound kind="class">
<name>std::__cxx11::basic_string</name>
<filename>std/__cxx11/basic_string.adoc</filename>
</compound>
<compound kind="class">
<name>std::__cxx11::_List_base</name>
<filename>std/__cxx11/_List_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::__cxx11::list</name>
<filename>std/__cxx11/list.adoc</filename>
</compound>
<compound kind="class">
<name>std::string</name>
<filename>std/string.adoc</filename>
</compound>
<compound kind="class">
<name>std::__pair_base</name>
<filename>std/__pair_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::pair</name>
<filename>std/pair.adoc</filename>
</compound>
<compound kind="class">
<name>std::exception</name>
<filename>std/exception.adoc</filename>
</compound>
<compound kind="class">
<name>std::error_code</name>
<filename>std/error_code.adoc</filename>
</compound>
<compound kind="class">
<name>std::function</name>
<filename>std/function.adoc</filename>
</compound>
<compound kind="class">
<name>std::_Optional_base_impl</name>
<filename>std/_Optional_base_impl.adoc</filename>
</compound>
<compound kind="class">
<name>std::_Optional_base</name>
<filename>std/_Optional_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::_Enable_copy_move</name>
<filename>std/_Enable_copy_move.adoc</filename>
</compound>
<compound kind="class">
<name>std::optional</name>
<filename>std/optional.adoc</filename>
</compound>
<compound kind="class">
<name>std::_Vector_base</name>
<filename>std/_Vector_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::vector</name>
<filename>std/vector.adoc</filename>
</compound>
<compound kind="namespace">
<name>std::chrono</name>
<filename>std/chrono.adoc</filename>
<class kind="class">std::chrono::time_point</class>
</compound>
<compound kind="namespace">
<name>std::chrono::_V2</name>
<filename>std/chrono/_V2.adoc</filename>
<class kind="class">std::chrono::_V2::steady_clock</class>
</compound>
<compound kind="class">
<name>std::chrono::_V2::steady_clock</name>
<filename>std/chrono/_V2/steady_clock.adoc</filename>
</compound>
<compound kind="class">
<name>std::chrono::time_point</name>
<filename>std/chrono/time_point.adoc</filename>
</compound>
<compound kind="class">
<name>std::__atomic_base</name>
<filename>std/__atomic_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::atomic</name>
<filename>std/atomic.adoc</filename>
</compound>
<compound kind="class">
<name>std::binary_function</name>
<filename>std/binary_function.adoc</filename>
</compound>
<compound kind="class">
<name>std::less</name>
<filename>std/less.adoc</filename>
</compound>
<compound kind="class">
<name>std::set</name>
<filename>std/set.adoc</filename>
</compound>
<compound kind="class">
<name>std::_Tuple_impl</name>
<filename>std/_Tuple_impl.adoc</filename>
</compound>
<compound kind="class">
<name>std::tuple</name>
<filename>std/tuple.adoc</filename>
</compound>
<compound kind="class">
<name>std::array</name>
<filename>std/array.adoc</filename>
</compound>
<compound kind="class">
<name>std::monostate</name>
<filename>std/monostate.adoc</filename>
</compound>
<compound kind="namespace">
<name>std::__detail::__variant</name>
<filename>std/__detail/__variant.adoc</filename>
<class kind="class">std::__detail::__variant::_Variant_storage</class>
<class kind="class">std::__detail::__variant::_Variant_storage_alias</class>
<class kind="class">std::__detail::__variant::_Copy_ctor_base</class>
<class kind="class">std::__detail::__variant::_Copy_ctor_alias</class>
<class kind="class">std::__detail::__variant::_Move_ctor_base</class>
<class kind="class">std::__detail::__variant::_Move_ctor_alias</class>
<class kind="class">std::__detail::__variant::_Copy_assign_base</class>
<class kind="class">std::__detail::__variant::_Copy_assign_alias</class>
<class kind="class">std::__detail::__variant::_Move_assign_base</class>
<class kind="class">std::__detail::__variant::_Move_assign_alias</class>
<class kind="class">std::__detail::__variant::_Variant_base</class>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Variant_storage</name>
<filename>std/__detail/__variant/_Variant_storage.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Variant_storage_alias</name>
<filename>std/__detail/__variant/_Variant_storage_alias.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Copy_ctor_base</name>
<filename>std/__detail/__variant/_Copy_ctor_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Copy_ctor_alias</name>
<filename>std/__detail/__variant/_Copy_ctor_alias.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Move_ctor_base</name>
<filename>std/__detail/__variant/_Move_ctor_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Move_ctor_alias</name>
<filename>std/__detail/__variant/_Move_ctor_alias.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Copy_assign_base</name>
<filename>std/__detail/__variant/_Copy_assign_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Copy_assign_alias</name>
<filename>std/__detail/__variant/_Copy_assign_alias.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Move_assign_base</name>
<filename>std/__detail/__variant/_Move_assign_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Move_assign_alias</name>
<filename>std/__detail/__variant/_Move_assign_alias.adoc</filename>
</compound>
<compound kind="class">
<name>std::__detail::__variant::_Variant_base</name>
<filename>std/__detail/__variant/_Variant_base.adoc</filename>
</compound>
<compound kind="class">
<name>std::variant</name>
<filename>std/variant.adoc</filename>
</compound>
<compound kind="class">
<name>std::nullopt_t</name>
<filename>std/nullopt_t.adoc</filename>
</compound>
<compound kind="class">
<name>std::nullopt</name>
<filename>std/nullopt.adoc</filename>
</compound>
<compound kind="class">
<name>BaseVersion</name>
<filename>BaseVersion.adoc</filename>
<member kind="function">
<type>void</type>
<name>~BaseVersion</name>
<anchorfile>BaseVersion/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>descriptor</name>
<anchorfile>BaseVersion/descriptor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>name</name>
<anchorfile>BaseVersion/name.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>typeString</name>
<anchorfile>BaseVersion/typeString.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>operator&lt;</name>
<anchorfile>BaseVersion/operator_lt.adoc</anchorfile>
<anchor/>
<arglist>(BaseVersion&amp; a)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>operator&gt;</name>
<anchorfile>BaseVersion/operator_gt.adoc</anchorfile>
<anchor/>
<arglist>(BaseVersion&amp; a)</arglist>
</member>
</compound>
<compound kind="class">
<name>QMetaTypeId</name>
<filename>QMetaTypeId-09.adoc</filename>
<member kind="function">
<type>int</type>
<name>qt_metatype_id</name>
<anchorfile>QMetaTypeId-09/qt_metatype_id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>QScopedPointerDeleter</name>
<filename>QScopedPointerDeleter.adoc</filename>
</compound>
<compound kind="class">
<name>QScopedPointer</name>
<filename>QScopedPointer.adoc</filename>
</compound>
<compound kind="class">
<name>QScopedPointerObjectDeleteLater</name>
<filename>QScopedPointerObjectDeleteLater.adoc</filename>
</compound>
<compound kind="class">
<name>QScopedPointerDeleteLater</name>
<filename>QScopedPointerDeleteLater.adoc</filename>
</compound>
<compound kind="class">
<name>unique_qobject_ptr</name>
<filename>unique_qobject_ptr.adoc</filename>
</compound>
<compound kind="class">
<name>QSharedPointer</name>
<filename>QSharedPointer.adoc</filename>
</compound>
<compound kind="class">
<name>shared_qobject_ptr</name>
<filename>shared_qobject_ptr.adoc</filename>
<member kind="function">
<type>void</type>
<name>shared_qobject_ptr</name>
<anchorfile>shared_qobject_ptr/2constructor-044.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>shared_qobject_ptr</name>
<anchorfile>shared_qobject_ptr/2constructor-0cd.adoc</anchorfile>
<anchor/>
<arglist>(T* ptr)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>shared_qobject_ptr</name>
<anchorfile>shared_qobject_ptr/2constructor-0c7.adoc</anchorfile>
<anchor/>
<arglist>(std::nullptr_t null_ptr)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>shared_qobject_ptr</name>
<anchorfile>shared_qobject_ptr/2constructor-04d.adoc</anchorfile>
<anchor/>
<arglist>(const shared_qobject_ptr&lt;Derived&gt;&amp; other)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>shared_qobject_ptr</name>
<anchorfile>shared_qobject_ptr/2constructor-0f.adoc</anchorfile>
<anchor/>
<arglist>(const QSharedPointer&lt;Derived&gt;&amp; other)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>reset</name>
<anchorfile>shared_qobject_ptr/reset-01.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>reset</name>
<anchorfile>shared_qobject_ptr/reset-03.adoc</anchorfile>
<anchor/>
<arglist>(T* other)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>reset</name>
<anchorfile>shared_qobject_ptr/reset-02.adoc</anchorfile>
<anchor/>
<arglist>(const shared_qobject_ptr&lt;T&gt;&amp; other)</arglist>
</member>
</compound>
<compound kind="class">
<name>QLoggingCategory</name>
<filename>QLoggingCategory.adoc</filename>
</compound>
<compound kind="class">
<name>TaskStepState</name>
<filename>TaskStepState.adoc</filename>
</compound>
<compound kind="class">
<name>QMetaTypeId</name>
<filename>QMetaTypeId-0c2.adoc</filename>
<member kind="function">
<type>int</type>
<name>qt_metatype_id</name>
<anchorfile>QMetaTypeId-0c2/qt_metatype_id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>QUuid</name>
<filename>QUuid.adoc</filename>
</compound>
<compound kind="class">
<name>qint64</name>
<filename>qint64.adoc</filename>
</compound>
<compound kind="class">
<name>TaskStepProgress</name>
<filename>TaskStepProgress.adoc</filename>
<member kind="function">
<type>void</type>
<name>TaskStepProgress</name>
<anchorfile>TaskStepProgress/2constructor-0ef.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>TaskStepProgress</name>
<anchorfile>TaskStepProgress/2constructor-0e2.adoc</anchorfile>
<anchor/>
<arglist>(QUuid uid_)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isDone</name>
<anchorfile>TaskStepProgress/isDone.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>update</name>
<anchorfile>TaskStepProgress/update.adoc</anchorfile>
<anchor/>
<arglist>(qint64 new_current, qint64 new_total)</arglist>
</member>
</compound>
<compound kind="class">
<name>QMetaTypeId</name>
<filename>QMetaTypeId-0d.adoc</filename>
<member kind="function">
<type>int</type>
<name>qt_metatype_id</name>
<anchorfile>QMetaTypeId-0d/qt_metatype_id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>TaskStepProgressList</name>
<filename>TaskStepProgressList.adoc</filename>
</compound>
<compound kind="class">
<name>QRunnable</name>
<filename>QRunnable.adoc</filename>
</compound>
<compound kind="class">
<name>Task</name>
<filename>Task.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>Task/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>Task/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>Task/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>Task/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>Task</name>
<anchorfile>Task/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(bool show_debug_log)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~Task</name>
<anchorfile>Task/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isRunning</name>
<anchorfile>Task/isRunning.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isFinished</name>
<anchorfile>Task/isFinished.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>wasSuccessful</name>
<anchorfile>Task/wasSuccessful.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isMultiStep</name>
<anchorfile>Task/isMultiStep.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>failReason</name>
<anchorfile>Task/failReason.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>warnings</name>
<anchorfile>Task/warnings.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canAbort</name>
<anchorfile>Task/canAbort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>State</type>
<name>getState</name>
<anchorfile>Task/getState.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getStatus</name>
<anchorfile>Task/getStatus.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getDetails</name>
<anchorfile>Task/getDetails.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>qint64</type>
<name>getProgress</name>
<anchorfile>Task/getProgress.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>qint64</type>
<name>getTotalProgress</name>
<anchorfile>Task/getTotalProgress.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>TaskStepProgressList</type>
<name>getStepProgress</name>
<anchorfile>Task/getStepProgress.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QUuid</type>
<name>getUid</name>
<anchorfile>Task/getUid.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>logWarning</name>
<anchorfile>Task/logWarning.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; line)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>started</name>
<anchorfile>Task/started.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>progress</name>
<anchorfile>Task/progress.adoc</anchorfile>
<anchor/>
<arglist>(qint64 current, qint64 total)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>finished</name>
<anchorfile>Task/finished.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>succeeded</name>
<anchorfile>Task/succeeded.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>aborted</name>
<anchorfile>Task/aborted.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>failed</name>
<anchorfile>Task/failed.adoc</anchorfile>
<anchor/>
<arglist>(QString reason)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>status</name>
<anchorfile>Task/status.adoc</anchorfile>
<anchor/>
<arglist>(QString status)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>details</name>
<anchorfile>Task/details.adoc</anchorfile>
<anchor/>
<arglist>(QString details)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>stepProgress</name>
<anchorfile>Task/stepProgress.adoc</anchorfile>
<anchor/>
<arglist>(const TaskStepProgress&amp; task_progress)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>abortStatusChanged</name>
<anchorfile>Task/abortStatusChanged.adoc</anchorfile>
<anchor/>
<arglist>(bool can_abort)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>run</name>
<anchorfile>Task/run.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>start</name>
<anchorfile>Task/start.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>Task/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setAbortable</name>
<anchorfile>Task/setAbortable.adoc</anchorfile>
<anchor/>
<arglist>(bool can_abort)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>executeTask</name>
<anchorfile>Task/executeTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>emitSucceeded</name>
<anchorfile>Task/emitSucceeded.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>emitAborted</name>
<anchorfile>Task/emitAborted.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>emitFailed</name>
<anchorfile>Task/emitFailed.adoc</anchorfile>
<anchor/>
<arglist>(QString reason)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>propagateStepProgress</name>
<anchorfile>Task/propagateStepProgress.adoc</anchorfile>
<anchor/>
<arglist>(const TaskStepProgress&amp; task_progress)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setStatus</name>
<anchorfile>Task/setStatus.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; status)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setDetails</name>
<anchorfile>Task/setDetails.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; details)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setProgress</name>
<anchorfile>Task/setProgress.adoc</anchorfile>
<anchor/>
<arglist>(qint64 current, qint64 total)</arglist>
</member>
</compound>
<compound kind="class">
<name>QAbstractItemModel</name>
<filename>QAbstractItemModel.adoc</filename>
</compound>
<compound kind="class">
<name>QAbstractListModel</name>
<filename>QAbstractListModel.adoc</filename>
</compound>
<compound kind="class">
<name>QModelIndex</name>
<filename>QModelIndex.adoc</filename>
</compound>
<compound kind="class">
<name>QVariant</name>
<filename>QVariant.adoc</filename>
</compound>
<compound kind="class">
<name>QHash</name>
<filename>QHash.adoc</filename>
</compound>
<compound kind="class">
<name>QByteArray</name>
<filename>QByteArray.adoc</filename>
</compound>
<compound kind="class">
<name>BaseVersionList</name>
<filename>BaseVersionList.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>BaseVersionList/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>BaseVersionList/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>BaseVersionList/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>BaseVersionList/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>BaseVersionList</name>
<anchorfile>BaseVersionList/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QObject* parent)</arglist>
</member>
<member kind="function">
<type>Task::Ptr</type>
<name>getLoadTask</name>
<anchorfile>BaseVersionList/getLoadTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isLoaded</name>
<anchorfile>BaseVersionList/isLoaded.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>const BaseVersion::Ptr</type>
<name>at</name>
<anchorfile>BaseVersionList/at.adoc</anchorfile>
<anchor/>
<arglist>(int i)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>count</name>
<anchorfile>BaseVersionList/count.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>data</name>
<anchorfile>BaseVersionList/data.adoc</anchorfile>
<anchor/>
<arglist>(const QModelIndex&amp; index, int role)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>rowCount</name>
<anchorfile>BaseVersionList/rowCount.adoc</anchorfile>
<anchor/>
<arglist>(const QModelIndex&amp; parent)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>columnCount</name>
<anchorfile>BaseVersionList/columnCount.adoc</anchorfile>
<anchor/>
<arglist>(const QModelIndex&amp; parent)</arglist>
</member>
<member kind="function">
<type>QHash&lt;int, QByteArray&gt;</type>
<name>roleNames</name>
<anchorfile>BaseVersionList/roleNames.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>BaseVersionList::RoleList</type>
<name>providesRoles</name>
<anchorfile>BaseVersionList/providesRoles.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>BaseVersion::Ptr</type>
<name>findVersion</name>
<anchorfile>BaseVersionList/findVersion.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; descriptor)</arglist>
</member>
<member kind="function">
<type>BaseVersion::Ptr</type>
<name>getRecommended</name>
<anchorfile>BaseVersionList/getRecommended.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>sortVersions</name>
<anchorfile>BaseVersionList/sortVersions.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>updateListData</name>
<anchorfile>BaseVersionList/updateListData.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;BaseVersion::Ptr&gt; versions)</arglist>
</member>
</compound>
<compound kind="class">
<name>InstanceCopyPrefs</name>
<filename>InstanceCopyPrefs.adoc</filename>
<member kind="function">
<type>bool</type>
<name>allTrue</name>
<anchorfile>InstanceCopyPrefs/allTrue.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getSelectedFiltersAsRegex</name>
<anchorfile>InstanceCopyPrefs/getSelectedFiltersAsRegex-07.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getSelectedFiltersAsRegex</name>
<anchorfile>InstanceCopyPrefs/getSelectedFiltersAsRegex-02.adoc</anchorfile>
<anchor/>
<arglist>(const QStringList&amp; additionalFilters)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopySavesEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopySavesEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isKeepPlaytimeEnabled</name>
<anchorfile>InstanceCopyPrefs/isKeepPlaytimeEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyGameOptionsEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyGameOptionsEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyResourcePacksEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyResourcePacksEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyShaderPacksEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyShaderPacksEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyServersEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyServersEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyModsEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyModsEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isCopyScreenshotsEnabled</name>
<anchorfile>InstanceCopyPrefs/isCopyScreenshotsEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isUseSymLinksEnabled</name>
<anchorfile>InstanceCopyPrefs/isUseSymLinksEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isLinkRecursivelyEnabled</name>
<anchorfile>InstanceCopyPrefs/isLinkRecursivelyEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isUseHardLinksEnabled</name>
<anchorfile>InstanceCopyPrefs/isUseHardLinksEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isDontLinkSavesEnabled</name>
<anchorfile>InstanceCopyPrefs/isDontLinkSavesEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isUseCloneEnabled</name>
<anchorfile>InstanceCopyPrefs/isUseCloneEnabled.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopySaves</name>
<anchorfile>InstanceCopyPrefs/enableCopySaves.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableKeepPlaytime</name>
<anchorfile>InstanceCopyPrefs/enableKeepPlaytime.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyGameOptions</name>
<anchorfile>InstanceCopyPrefs/enableCopyGameOptions.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyResourcePacks</name>
<anchorfile>InstanceCopyPrefs/enableCopyResourcePacks.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyShaderPacks</name>
<anchorfile>InstanceCopyPrefs/enableCopyShaderPacks.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyServers</name>
<anchorfile>InstanceCopyPrefs/enableCopyServers.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyMods</name>
<anchorfile>InstanceCopyPrefs/enableCopyMods.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableCopyScreenshots</name>
<anchorfile>InstanceCopyPrefs/enableCopyScreenshots.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableUseSymLinks</name>
<anchorfile>InstanceCopyPrefs/enableUseSymLinks.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableLinkRecursively</name>
<anchorfile>InstanceCopyPrefs/enableLinkRecursively.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableUseHardLinks</name>
<anchorfile>InstanceCopyPrefs/enableUseHardLinks.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableDontLinkSaves</name>
<anchorfile>InstanceCopyPrefs/enableDontLinkSaves.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>enableUseClone</name>
<anchorfile>InstanceCopyPrefs/enableUseClone.adoc</anchorfile>
<anchor/>
<arglist>(bool b)</arglist>
</member>
</compound>
<compound kind="class">
<name>Setting</name>
<filename>Setting.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>Setting/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>Setting/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>Setting/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>Setting/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>Setting</name>
<anchorfile>Setting/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QStringList synonyms, QVariant defVal)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>id</name>
<anchorfile>Setting/id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>configKeys</name>
<anchorfile>Setting/configKeys.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>get</name>
<anchorfile>Setting/get.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>defValue</name>
<anchorfile>Setting/defValue.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>SettingChanged</name>
<anchorfile>Setting/SettingChanged.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting, QVariant value)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>settingReset</name>
<anchorfile>Setting/settingReset.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>set</name>
<anchorfile>Setting/set.adoc</anchorfile>
<anchor/>
<arglist>(QVariant value)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>reset</name>
<anchorfile>Setting/reset.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>SettingsObject</name>
<filename>SettingsObject.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>SettingsObject/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>SettingsObject/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>SettingsObject/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>SettingsObject/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>SettingsObject</name>
<anchorfile>SettingsObject/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QObject* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~SettingsObject</name>
<anchorfile>SettingsObject/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>std::shared_ptr&lt;Setting&gt;</type>
<name>registerOverride</name>
<anchorfile>SettingsObject/registerOverride.adoc</anchorfile>
<anchor/>
<arglist>(std::shared_ptr&lt;Setting&gt; original, std::shared_ptr&lt;Setting&gt; gate)</arglist>
</member>
<member kind="function">
<type>std::shared_ptr&lt;Setting&gt;</type>
<name>registerPassthrough</name>
<anchorfile>SettingsObject/registerPassthrough.adoc</anchorfile>
<anchor/>
<arglist>(std::shared_ptr&lt;Setting&gt; original, std::shared_ptr&lt;Setting&gt; gate)</arglist>
</member>
<member kind="function">
<type>std::shared_ptr&lt;Setting&gt;</type>
<name>registerSetting</name>
<anchorfile>SettingsObject/registerSetting-09.adoc</anchorfile>
<anchor/>
<arglist>(QStringList synonyms, QVariant defVal)</arglist>
</member>
<member kind="function">
<type>std::shared_ptr&lt;Setting&gt;</type>
<name>registerSetting</name>
<anchorfile>SettingsObject/registerSetting-0e.adoc</anchorfile>
<anchor/>
<arglist>(QString id, QVariant defVal)</arglist>
</member>
<member kind="function">
<type>std::shared_ptr&lt;Setting&gt;</type>
<name>getSetting</name>
<anchorfile>SettingsObject/getSetting.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>get</name>
<anchorfile>SettingsObject/get.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>set</name>
<anchorfile>SettingsObject/set.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id, QVariant value)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>reset</name>
<anchorfile>SettingsObject/reset.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>contains</name>
<anchorfile>SettingsObject/contains.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>reload</name>
<anchorfile>SettingsObject/reload.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>suspendSave</name>
<anchorfile>SettingsObject/suspendSave.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>resumeSave</name>
<anchorfile>SettingsObject/resumeSave.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>SettingChanged</name>
<anchorfile>SettingsObject/SettingChanged.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting, QVariant value)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>settingReset</name>
<anchorfile>SettingsObject/settingReset.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>changeSetting</name>
<anchorfile>SettingsObject/changeSetting.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting, QVariant value)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>resetSetting</name>
<anchorfile>SettingsObject/resetSetting.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>connectSignals</name>
<anchorfile>SettingsObject/connectSignals.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting)</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>retrieveValue</name>
<anchorfile>SettingsObject/retrieveValue.adoc</anchorfile>
<anchor/>
<arglist>(const Setting&amp; setting)</arglist>
</member>
</compound>
<compound kind="class">
<name>SettingsObjectPtr</name>
<filename>SettingsObjectPtr.adoc</filename>
</compound>
<compound kind="class">
<name>SettingsObjectWeakPtr</name>
<filename>SettingsObjectWeakPtr.adoc</filename>
</compound>
<compound kind="class">
<name>InstanceNameChange</name>
<filename>InstanceNameChange.adoc</filename>
</compound>
<compound kind="class">
<name>QPaintDevice</name>
<filename>QPaintDevice.adoc</filename>
</compound>
<compound kind="class">
<name>QWidget</name>
<filename>QWidget.adoc</filename>
</compound>
<compound kind="class">
<name>ShouldUpdate</name>
<filename>ShouldUpdate.adoc</filename>
</compound>
<compound kind="class">
<name>InstanceName</name>
<filename>InstanceName.adoc</filename>
<member kind="function">
<type>void</type>
<name>InstanceName</name>
<anchorfile>InstanceName/2constructor-05.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>InstanceName</name>
<anchorfile>InstanceName/2constructor-01.adoc</anchorfile>
<anchor/>
<arglist>(QString name, QString version)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>modifiedName</name>
<anchorfile>InstanceName/modifiedName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>originalName</name>
<anchorfile>InstanceName/originalName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>name</name>
<anchorfile>InstanceName/name.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>version</name>
<anchorfile>InstanceName/version.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setName</name>
<anchorfile>InstanceName/setName-0c.adoc</anchorfile>
<anchor/>
<arglist>(QString name)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setName</name>
<anchorfile>InstanceName/setName-0a.adoc</anchorfile>
<anchor/>
<arglist>(InstanceName&amp; other)</arglist>
</member>
</compound>
<compound kind="class">
<name>InstanceTask</name>
<filename>InstanceTask.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>InstanceTask/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>InstanceTask/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>InstanceTask/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>InstanceTask/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>InstanceTask</name>
<anchorfile>InstanceTask/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~InstanceTask</name>
<anchorfile>InstanceTask/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setParentSettings</name>
<anchorfile>InstanceTask/setParentSettings.adoc</anchorfile>
<anchor/>
<arglist>(SettingsObjectPtr settings)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setStagingPath</name>
<anchorfile>InstanceTask/setStagingPath.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; stagingPath)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setIcon</name>
<anchorfile>InstanceTask/setIcon.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; icon)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setGroup</name>
<anchorfile>InstanceTask/setGroup.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; group)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>group</name>
<anchorfile>InstanceTask/group.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>shouldConfirmUpdate</name>
<anchorfile>InstanceTask/shouldConfirmUpdate.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setConfirmUpdate</name>
<anchorfile>InstanceTask/setConfirmUpdate.adoc</anchorfile>
<anchor/>
<arglist>(bool confirm)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>shouldOverride</name>
<anchorfile>InstanceTask/shouldOverride.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>originalInstanceID</name>
<anchorfile>InstanceTask/originalInstanceID.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setOverride</name>
<anchorfile>InstanceTask/setOverride.adoc</anchorfile>
<anchor/>
<arglist>(bool override, QString instance_id_to_override)</arglist>
</member>
</compound>
<compound kind="class">
<name>Validity</name>
<filename>Validity.adoc</filename>
</compound>
<compound kind="class">
<name>QDateTime</name>
<filename>QDateTime.adoc</filename>
</compound>
<compound kind="class">
<name>QMap</name>
<filename>QMap.adoc</filename>
</compound>
<compound kind="class">
<name>QVariantMap</name>
<filename>QVariantMap.adoc</filename>
</compound>
<compound kind="class">
<name>Token</name>
<filename>Token.adoc</filename>
</compound>
<compound kind="class">
<name>Skin</name>
<filename>Skin.adoc</filename>
</compound>
<compound kind="class">
<name>Cape</name>
<filename>Cape.adoc</filename>
</compound>
<compound kind="class">
<name>MinecraftEntitlement</name>
<filename>MinecraftEntitlement.adoc</filename>
</compound>
<compound kind="class">
<name>MinecraftProfile</name>
<filename>MinecraftProfile.adoc</filename>
</compound>
<compound kind="class">
<name>AccountType</name>
<filename>AccountType.adoc</filename>
</compound>
<compound kind="class">
<name>AccountState</name>
<filename>AccountState.adoc</filename>
</compound>
<compound kind="class">
<name>QJsonObject</name>
<filename>QJsonObject.adoc</filename>
</compound>
<compound kind="class">
<name>AccountData</name>
<filename>AccountData.adoc</filename>
<member kind="function">
<type>QJsonObject</type>
<name>saveState</name>
<anchorfile>AccountData/saveState.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>resumeStateFromV3</name>
<anchorfile>AccountData/resumeStateFromV3.adoc</anchorfile>
<anchor/>
<arglist>(QJsonObject data)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>accountDisplayString</name>
<anchorfile>AccountData/accountDisplayString.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>accessToken</name>
<anchorfile>AccountData/accessToken.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>profileId</name>
<anchorfile>AccountData/profileId.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>profileName</name>
<anchorfile>AccountData/profileName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>lastError</name>
<anchorfile>AccountData/lastError.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>Usable</name>
<filename>Usable.adoc</filename>
<member kind="function">
<type>void</type>
<name>~Usable</name>
<anchorfile>Usable/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>std::size_t</type>
<name>useCount</name>
<anchorfile>Usable/useCount.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isInUse</name>
<anchorfile>Usable/isInUse.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>decrementUses</name>
<anchorfile>Usable/decrementUses.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>incrementUses</name>
<anchorfile>Usable/incrementUses.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>MinecraftAccount</name>
<filename>MinecraftAccount.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>MinecraftAccount/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>MinecraftAccount/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>MinecraftAccount/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>MinecraftAccount/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>MinecraftAccount</name>
<anchorfile>MinecraftAccount/2constructor-0d.adoc</anchorfile>
<anchor/>
<arglist>(const MinecraftAccount&amp; other, QObject* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>MinecraftAccount</name>
<anchorfile>MinecraftAccount/2constructor-0e.adoc</anchorfile>
<anchor/>
<arglist>(QObject* parent)</arglist>
</member>
<member kind="function">
<type>MinecraftAccountPtr</type>
<name>createBlankMSA</name>
<anchorfile>MinecraftAccount/createBlankMSA.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>MinecraftAccountPtr</type>
<name>createOffline</name>
<anchorfile>MinecraftAccount/createOffline.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; username)</arglist>
</member>
<member kind="function">
<type>MinecraftAccountPtr</type>
<name>loadFromJsonV3</name>
<anchorfile>MinecraftAccount/loadFromJsonV3.adoc</anchorfile>
<anchor/>
<arglist>(const QJsonObject&amp; json)</arglist>
</member>
<member kind="function">
<type>QUuid</type>
<name>uuidFromUsername</name>
<anchorfile>MinecraftAccount/uuidFromUsername.adoc</anchorfile>
<anchor/>
<arglist>(QString username)</arglist>
</member>
<member kind="function">
<type>QJsonObject</type>
<name>saveToJson</name>
<anchorfile>MinecraftAccount/saveToJson.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;AuthFlow&gt;</type>
<name>login</name>
<anchorfile>MinecraftAccount/login.adoc</anchorfile>
<anchor/>
<arglist>(bool useDeviceCode)</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;AuthFlow&gt;</type>
<name>refresh</name>
<anchorfile>MinecraftAccount/refresh.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;AuthFlow&gt;</type>
<name>currentTask</name>
<anchorfile>MinecraftAccount/currentTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>internalId</name>
<anchorfile>MinecraftAccount/internalId.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>accountDisplayString</name>
<anchorfile>MinecraftAccount/accountDisplayString.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>accessToken</name>
<anchorfile>MinecraftAccount/accessToken.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>profileId</name>
<anchorfile>MinecraftAccount/profileId.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>profileName</name>
<anchorfile>MinecraftAccount/profileName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isActive</name>
<anchorfile>MinecraftAccount/isActive.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>AccountType</type>
<name>accountType</name>
<anchorfile>MinecraftAccount/accountType.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>ownsMinecraft</name>
<anchorfile>MinecraftAccount/ownsMinecraft.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasProfile</name>
<anchorfile>MinecraftAccount/hasProfile.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>typeString</name>
<anchorfile>MinecraftAccount/typeString.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QPixmap</type>
<name>getFace</name>
<anchorfile>MinecraftAccount/getFace.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>AccountState</type>
<name>accountState</name>
<anchorfile>MinecraftAccount/accountState.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>AccountData*</type>
<name>accountData</name>
<anchorfile>MinecraftAccount/accountData.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>shouldRefresh</name>
<anchorfile>MinecraftAccount/shouldRefresh.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>fillSession</name>
<anchorfile>MinecraftAccount/fillSession.adoc</anchorfile>
<anchor/>
<arglist>(AuthSessionPtr session)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>lastError</name>
<anchorfile>MinecraftAccount/lastError.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>changed</name>
<anchorfile>MinecraftAccount/changed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>activityChanged</name>
<anchorfile>MinecraftAccount/activityChanged.adoc</anchorfile>
<anchor/>
<arglist>(bool active)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>incrementUses</name>
<anchorfile>MinecraftAccount/incrementUses.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>decrementUses</name>
<anchorfile>MinecraftAccount/decrementUses.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>AuthSession</name>
<filename>AuthSession.adoc</filename>
<member kind="function">
<type>bool</type>
<name>MakeOffline</name>
<anchorfile>AuthSession/MakeOffline.adoc</anchorfile>
<anchor/>
<arglist>(QString offline_playername)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>MakeDemo</name>
<anchorfile>AuthSession/MakeDemo.adoc</anchorfile>
<anchor/>
<arglist>(QString name, QString uuid)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>serializeUserProperties</name>
<anchorfile>AuthSession/serializeUserProperties.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>AuthSessionPtr</name>
<filename>AuthSessionPtr.adoc</filename>
</compound>
<compound kind="class">
<name>UseLock</name>
<filename>UseLock.adoc</filename>
<member kind="function">
<type>void</type>
<name>UseLock</name>
<anchorfile>UseLock/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(shared_qobject_ptr&lt;Usable&gt; usable)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~UseLock</name>
<anchorfile>UseLock/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>AccountTaskState</name>
<filename>AccountTaskState.adoc</filename>
</compound>
<compound kind="class">
<name>AuthStep</name>
<filename>AuthStep.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>AuthStep/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>AuthStep/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>AuthStep/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>AuthStep/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>AuthStep</name>
<anchorfile>AuthStep/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(AccountData* data)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~AuthStep</name>
<anchorfile>AuthStep/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>describe</name>
<anchorfile>AuthStep/describe.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>perform</name>
<anchorfile>AuthStep/perform.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>abort</name>
<anchorfile>AuthStep/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>finished</name>
<anchorfile>AuthStep/finished.adoc</anchorfile>
<anchor/>
<arglist>(AccountTaskState resultingState, QString message)</arglist>
</member>
</compound>
<compound kind="class">
<name>QUrl</name>
<filename>QUrl.adoc</filename>
</compound>
<compound kind="class">
<name>AuthFlow</name>
<filename>AuthFlow.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>AuthFlow/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>AuthFlow/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>AuthFlow/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>AuthFlow/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>AuthFlow</name>
<anchorfile>AuthFlow/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(AccountData* data, Action action)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~AuthFlow</name>
<anchorfile>AuthFlow/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>executeTask</name>
<anchorfile>AuthFlow/executeTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>AccountTaskState</type>
<name>taskState</name>
<anchorfile>AuthFlow/taskState.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>AuthFlow/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>authorizeWithBrowser</name>
<anchorfile>AuthFlow/authorizeWithBrowser.adoc</anchorfile>
<anchor/>
<arglist>(const QUrl&amp; url)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>authorizeWithBrowserWithExtra</name>
<anchorfile>AuthFlow/authorizeWithBrowserWithExtra.adoc</anchorfile>
<anchor/>
<arglist>(QString url, QString code, int expiresIn)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>succeed</name>
<anchorfile>AuthFlow/succeed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>nextStep</name>
<anchorfile>AuthFlow/nextStep.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>MinecraftAccountPtr</name>
<filename>MinecraftAccountPtr.adoc</filename>
</compound>
<compound kind="class">
<name>QMetaTypeId</name>
<filename>QMetaTypeId-02.adoc</filename>
<member kind="function">
<type>int</type>
<name>qt_metatype_id</name>
<anchorfile>QMetaTypeId-02/qt_metatype_id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>AccountProfile</name>
<filename>AccountProfile.adoc</filename>
</compound>
<compound kind="class">
<name>QPixmap</name>
<filename>QPixmap.adoc</filename>
</compound>
<compound kind="class">
<name>IPathMatcher</name>
<filename>IPathMatcher.adoc</filename>
<member kind="function">
<type>void</type>
<name>~IPathMatcher</name>
<anchorfile>IPathMatcher/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>matches</name>
<anchorfile>IPathMatcher/matches.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; string)</arglist>
</member>
</compound>
<compound kind="class">
<name>INIFile</name>
<filename>INIFile.adoc</filename>
<member kind="function">
<type>void</type>
<name>INIFile</name>
<anchorfile>INIFile/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>loadFile</name>
<anchorfile>INIFile/loadFile-0e.adoc</anchorfile>
<anchor/>
<arglist>(QString fileName)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>loadFile</name>
<anchorfile>INIFile/loadFile-03.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray data)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>saveFile</name>
<anchorfile>INIFile/saveFile.adoc</anchorfile>
<anchor/>
<arglist>(QString fileName)</arglist>
</member>
<member kind="function">
<type>QVariant</type>
<name>get</name>
<anchorfile>INIFile/get.adoc</anchorfile>
<anchor/>
<arglist>(QString key, QVariant def)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>set</name>
<anchorfile>INIFile/set.adoc</anchorfile>
<anchor/>
<arglist>(QString key, QVariant val)</arglist>
</member>
</compound>
<compound kind="namespace">
<name>Net</name>
<filename>Net.adoc</filename>
<class kind="class">Net::Mode</class>
<class kind="class">Net::HeaderPair</class>
<class kind="class">Net::HeaderProxy</class>
<class kind="class">Net::Validator</class>
<class kind="class">Net::Sink</class>
<class kind="class">Net::NetRequest</class>
<class kind="class">Net::Download</class>
<class kind="class">Net::ChecksumValidator</class>
<class kind="class">Net::ByteArraySink</class>
<class kind="class">Net::FileSink</class>
<class kind="class">Net::MetaCacheSink</class>
<class kind="class">Net::Upload</class>
<class kind="class">Net::ApiHeaderProxy</class>
<class kind="class">Net::RawHeaderProxy</class>
<member kind="function">
<type>bool</type>
<name>isApplicationError</name>
<anchorfile>Net/isApplicationError.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply::NetworkError x)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::Mode</name>
<filename>Net/Mode.adoc</filename>
</compound>
<compound kind="class">
<name>Net::HeaderPair</name>
<filename>Net/HeaderPair.adoc</filename>
</compound>
<compound kind="class">
<name>Net::HeaderProxy</name>
<filename>Net/HeaderProxy.adoc</filename>
<member kind="function">
<type>void</type>
<name>HeaderProxy</name>
<anchorfile>Net/HeaderProxy/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~HeaderProxy</name>
<anchorfile>Net/HeaderProxy/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QList&lt;HeaderPair&gt;</type>
<name>headers</name>
<anchorfile>Net/HeaderProxy/headers.adoc</anchorfile>
<anchor/>
<arglist>(const QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>writeHeaders</name>
<anchorfile>Net/HeaderProxy/writeHeaders.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::Validator</name>
<filename>Net/Validator.adoc</filename>
<member kind="function">
<type>void</type>
<name>Validator</name>
<anchorfile>Net/Validator/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~Validator</name>
<anchorfile>Net/Validator/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>init</name>
<anchorfile>Net/Validator/init.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>write</name>
<anchorfile>Net/Validator/write.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>Net/Validator/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>validate</name>
<anchorfile>Net/Validator/validate.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::Sink</name>
<filename>Net/Sink.adoc</filename>
<member kind="function">
<type>void</type>
<name>Sink</name>
<anchorfile>Net/Sink/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~Sink</name>
<anchorfile>Net/Sink/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>init</name>
<anchorfile>Net/Sink/init.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>write</name>
<anchorfile>Net/Sink/write.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>abort</name>
<anchorfile>Net/Sink/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>finalize</name>
<anchorfile>Net/Sink/finalize.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasLocalData</name>
<anchorfile>Net/Sink/hasLocalData.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addValidator</name>
<anchorfile>Net/Sink/addValidator.adoc</anchorfile>
<anchor/>
<arglist>(Validator* validator)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>initAllValidators</name>
<anchorfile>Net/Sink/initAllValidators.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>finalizeAllValidators</name>
<anchorfile>Net/Sink/finalizeAllValidators.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>failAllValidators</name>
<anchorfile>Net/Sink/failAllValidators.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>writeAllValidators</name>
<anchorfile>Net/Sink/writeAllValidators.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::NetRequest</name>
<filename>Net/NetRequest.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>Net/NetRequest/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>Net/NetRequest/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>Net/NetRequest/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>Net/NetRequest/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>NetRequest</name>
<anchorfile>Net/NetRequest/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~NetRequest</name>
<anchorfile>Net/NetRequest/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addValidator</name>
<anchorfile>Net/NetRequest/addValidator.adoc</anchorfile>
<anchor/>
<arglist>(Validator* v)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>Net/NetRequest/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canAbort</name>
<anchorfile>Net/NetRequest/canAbort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setNetwork</name>
<anchorfile>Net/NetRequest/setNetwork.adoc</anchorfile>
<anchor/>
<arglist>(shared_qobject_ptr&lt;QNetworkAccessManager&gt; network)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addHeaderProxy</name>
<anchorfile>Net/NetRequest/addHeaderProxy.adoc</anchorfile>
<anchor/>
<arglist>(Net::HeaderProxy* proxy)</arglist>
</member>
<member kind="function">
<type>QUrl</type>
<name>url</name>
<anchorfile>Net/NetRequest/url.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setUrl</name>
<anchorfile>Net/NetRequest/setUrl.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url)</arglist>
</member>
<member kind="function">
<type>int</type>
<name>replyStatusCode</name>
<anchorfile>Net/NetRequest/replyStatusCode.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QNetworkReply::NetworkError</type>
<name>error</name>
<anchorfile>Net/NetRequest/error.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>errorString</name>
<anchorfile>Net/NetRequest/errorString.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onProgress</name>
<anchorfile>Net/NetRequest/onProgress.adoc</anchorfile>
<anchor/>
<arglist>(qint64 bytesReceived, qint64 bytesTotal)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>downloadError</name>
<anchorfile>Net/NetRequest/downloadError.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply::NetworkError error)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>sslErrors</name>
<anchorfile>Net/NetRequest/sslErrors.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;QSslError&gt;&amp; errors)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>downloadFinished</name>
<anchorfile>Net/NetRequest/downloadFinished.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>downloadReadyRead</name>
<anchorfile>Net/NetRequest/downloadReadyRead.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>executeTask</name>
<anchorfile>Net/NetRequest/executeTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::Download</name>
<filename>Net/Download.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>Net/Download/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>Net/Download/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>Net/Download/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>Net/Download/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>Download</name>
<anchorfile>Net/Download/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Download::Ptr</type>
<name>makeCached</name>
<anchorfile>Net/Download/makeCached.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, MetaEntryPtr entry, Options options)</arglist>
</member>
<member kind="function">
<type>Download::Ptr</type>
<name>makeByteArray</name>
<anchorfile>Net/Download/makeByteArray.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, std::shared_ptr&lt;QByteArray&gt; output, Options options)</arglist>
</member>
<member kind="function">
<type>Download::Ptr</type>
<name>makeFile</name>
<anchorfile>Net/Download/makeFile.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, QString path, Options options)</arglist>
</member>
<member kind="function">
<type>QNetworkReply*</type>
<name>getReply</name>
<anchorfile>Net/Download/getReply.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; )</arglist>
</member>
</compound>
<compound kind="namespace">
<name>Net::ApiDownload</name>
<filename>Net/ApiDownload.adoc</filename>
<member kind="function">
<type>Download::Ptr</type>
<name>makeCached</name>
<anchorfile>Net/ApiDownload/makeCached.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, MetaEntryPtr entry, Download::Options options)</arglist>
</member>
<member kind="function">
<type>Download::Ptr</type>
<name>makeByteArray</name>
<anchorfile>Net/ApiDownload/makeByteArray.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, std::shared_ptr&lt;QByteArray&gt; output, Download::Options options)</arglist>
</member>
<member kind="function">
<type>Download::Ptr</type>
<name>makeFile</name>
<anchorfile>Net/ApiDownload/makeFile.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, QString path, Download::Options options)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::ChecksumValidator</name>
<filename>Net/ChecksumValidator.adoc</filename>
<member kind="function">
<type>void</type>
<name>ChecksumValidator</name>
<anchorfile>Net/ChecksumValidator/2constructor-0f.adoc</anchorfile>
<anchor/>
<arglist>(QCryptographicHash::Algorithm algorithm, QString expectedHex)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>ChecksumValidator</name>
<anchorfile>Net/ChecksumValidator/2constructor-07.adoc</anchorfile>
<anchor/>
<arglist>(QCryptographicHash::Algorithm algorithm, QByteArray expected)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~ChecksumValidator</name>
<anchorfile>Net/ChecksumValidator/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>init</name>
<anchorfile>Net/ChecksumValidator/init.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; )</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>write</name>
<anchorfile>Net/ChecksumValidator/write.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>Net/ChecksumValidator/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>validate</name>
<anchorfile>Net/ChecksumValidator/validate.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; )</arglist>
</member>
<member kind="function">
<type>QByteArray</type>
<name>hash</name>
<anchorfile>Net/ChecksumValidator/hash.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setExpected</name>
<anchorfile>Net/ChecksumValidator/setExpected.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray expected)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::ByteArraySink</name>
<filename>Net/ByteArraySink.adoc</filename>
<member kind="function">
<type>void</type>
<name>ByteArraySink</name>
<anchorfile>Net/ByteArraySink/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(std::shared_ptr&lt;QByteArray&gt; output)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~ByteArraySink</name>
<anchorfile>Net/ByteArraySink/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>init</name>
<anchorfile>Net/ByteArraySink/init.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>write</name>
<anchorfile>Net/ByteArraySink/write.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>abort</name>
<anchorfile>Net/ByteArraySink/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>finalize</name>
<anchorfile>Net/ByteArraySink/finalize.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasLocalData</name>
<anchorfile>Net/ByteArraySink/hasLocalData.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::FileSink</name>
<filename>Net/FileSink.adoc</filename>
<member kind="function">
<type>void</type>
<name>FileSink</name>
<anchorfile>Net/FileSink/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QString filename)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~FileSink</name>
<anchorfile>Net/FileSink/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>init</name>
<anchorfile>Net/FileSink/init.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>write</name>
<anchorfile>Net/FileSink/write.adoc</anchorfile>
<anchor/>
<arglist>(QByteArray&amp; data)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>abort</name>
<anchorfile>Net/FileSink/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>finalize</name>
<anchorfile>Net/FileSink/finalize.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasLocalData</name>
<anchorfile>Net/FileSink/hasLocalData.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>initCache</name>
<anchorfile>Net/FileSink/initCache.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; )</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>finalizeCache</name>
<anchorfile>Net/FileSink/finalizeCache.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::MetaCacheSink</name>
<filename>Net/MetaCacheSink.adoc</filename>
<member kind="function">
<type>void</type>
<name>MetaCacheSink</name>
<anchorfile>Net/MetaCacheSink/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(MetaEntryPtr entry, ChecksumValidator* md5sum, bool is_eternal)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~MetaCacheSink</name>
<anchorfile>Net/MetaCacheSink/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasLocalData</name>
<anchorfile>Net/MetaCacheSink/hasLocalData.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>initCache</name>
<anchorfile>Net/MetaCacheSink/initCache.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
<member kind="function">
<type>Task::State</type>
<name>finalizeCache</name>
<anchorfile>Net/MetaCacheSink/finalizeCache.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkReply&amp; reply)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::Upload</name>
<filename>Net/Upload.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>Net/Upload/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>Net/Upload/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>Net/Upload/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>Net/Upload/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>Upload</name>
<anchorfile>Net/Upload/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>Upload::Ptr</type>
<name>makeByteArray</name>
<anchorfile>Net/Upload/makeByteArray.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, std::shared_ptr&lt;QByteArray&gt; output, QByteArray m_post_data)</arglist>
</member>
<member kind="function">
<type>QNetworkReply*</type>
<name>getReply</name>
<anchorfile>Net/Upload/getReply.adoc</anchorfile>
<anchor/>
<arglist>(QNetworkRequest&amp; request)</arglist>
</member>
</compound>
<compound kind="namespace">
<name>Net::ApiUpload</name>
<filename>Net/ApiUpload.adoc</filename>
<member kind="function">
<type>Upload::Ptr</type>
<name>makeByteArray</name>
<anchorfile>Net/ApiUpload/makeByteArray.adoc</anchorfile>
<anchor/>
<arglist>(QUrl url, std::shared_ptr&lt;QByteArray&gt; output, QByteArray m_post_data)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::ApiHeaderProxy</name>
<filename>Net/ApiHeaderProxy.adoc</filename>
<member kind="function">
<type>void</type>
<name>ApiHeaderProxy</name>
<anchorfile>Net/ApiHeaderProxy/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~ApiHeaderProxy</name>
<anchorfile>Net/ApiHeaderProxy/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QList&lt;HeaderPair&gt;</type>
<name>headers</name>
<anchorfile>Net/ApiHeaderProxy/headers.adoc</anchorfile>
<anchor/>
<arglist>(const QNetworkRequest&amp; request)</arglist>
</member>
</compound>
<compound kind="class">
<name>Net::RawHeaderProxy</name>
<filename>Net/RawHeaderProxy.adoc</filename>
<member kind="function">
<type>void</type>
<name>RawHeaderProxy</name>
<anchorfile>Net/RawHeaderProxy/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;HeaderPair&gt; headers)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~RawHeaderProxy</name>
<anchorfile>Net/RawHeaderProxy/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QList&lt;HeaderPair&gt;</type>
<name>headers</name>
<anchorfile>Net/RawHeaderProxy/headers.adoc</anchorfile>
<anchor/>
<arglist>(const QNetworkRequest&amp; )</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addHeader</name>
<anchorfile>Net/RawHeaderProxy/addHeader-0e.adoc</anchorfile>
<anchor/>
<arglist>(const HeaderPair&amp; header)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addHeader</name>
<anchorfile>Net/RawHeaderProxy/addHeader-01.adoc</anchorfile>
<anchor/>
<arglist>(const QByteArray&amp; headerName, const QByteArray&amp; headerValue)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addHeaders</name>
<anchorfile>Net/RawHeaderProxy/addHeaders.adoc</anchorfile>
<anchor/>
<arglist>(const QList&lt;HeaderPair&gt;&amp; headers)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setHeaders</name>
<anchorfile>Net/RawHeaderProxy/setHeaders.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;HeaderPair&gt; headers)</arglist>
</member>
</compound>
<compound kind="namespace">
<name>SysInfo</name>
<filename>SysInfo.adoc</filename>
<member kind="function">
<type>QString</type>
<name>currentSystem</name>
<anchorfile>SysInfo/currentSystem.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>useQTForArch</name>
<anchorfile>SysInfo/useQTForArch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getSupportedJavaArchitecture</name>
<anchorfile>SysInfo/getSupportedJavaArchitecture.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>int</type>
<name>suitableMaxMem</name>
<anchorfile>SysInfo/suitableMaxMem.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>RuntimeContext</name>
<filename>RuntimeContext.adoc</filename>
<member kind="function">
<type>QString</type>
<name>mappedJavaRealArchitecture</name>
<anchorfile>RuntimeContext/mappedJavaRealArchitecture.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>updateFromInstanceSettings</name>
<anchorfile>RuntimeContext/updateFromInstanceSettings.adoc</anchorfile>
<anchor/>
<arglist>(SettingsObjectPtr instanceSettings)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getClassifier</name>
<anchorfile>RuntimeContext/getClassifier.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isLegacyArch</name>
<anchorfile>RuntimeContext/isLegacyArch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>classifierMatches</name>
<anchorfile>RuntimeContext/classifierMatches.adoc</anchorfile>
<anchor/>
<arglist>(QString target)</arglist>
</member>
</compound>
<compound kind="class">
<name>quint16</name>
<filename>quint16.adoc</filename>
</compound>
<compound kind="class">
<name>MinecraftTarget</name>
<filename>MinecraftTarget.adoc</filename>
<member kind="function">
<type>MinecraftTarget</type>
<name>parse</name>
<anchorfile>MinecraftTarget/parse.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; fullAddress, bool useWorld)</arglist>
</member>
</compound>
<compound kind="class">
<name>QDir</name>
<filename>QDir.adoc</filename>
</compound>
<compound kind="class">
<name>LaunchTask</name>
<filename>LaunchTask.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>LaunchTask/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>LaunchTask/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>LaunchTask/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>LaunchTask/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>LaunchTask</name>
<anchorfile>LaunchTask/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(MinecraftInstancePtr instance)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>init</name>
<anchorfile>LaunchTask/init.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;LaunchTask&gt;</type>
<name>create</name>
<anchorfile>LaunchTask/create.adoc</anchorfile>
<anchor/>
<arglist>(MinecraftInstancePtr inst)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~LaunchTask</name>
<anchorfile>LaunchTask/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>appendStep</name>
<anchorfile>LaunchTask/appendStep.adoc</anchorfile>
<anchor/>
<arglist>(shared_qobject_ptr&lt;LaunchStep&gt; step)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>prependStep</name>
<anchorfile>LaunchTask/prependStep.adoc</anchorfile>
<anchor/>
<arglist>(shared_qobject_ptr&lt;LaunchStep&gt; step)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setCensorFilter</name>
<anchorfile>LaunchTask/setCensorFilter.adoc</anchorfile>
<anchor/>
<arglist>(QMap&lt;QString, QString&gt; filter)</arglist>
</member>
<member kind="function">
<type>MinecraftInstancePtr</type>
<name>instance</name>
<anchorfile>LaunchTask/instance.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setPid</name>
<anchorfile>LaunchTask/setPid.adoc</anchorfile>
<anchor/>
<arglist>(qint64 pid)</arglist>
</member>
<member kind="function">
<type>qint64</type>
<name>pid</name>
<anchorfile>LaunchTask/pid.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>executeTask</name>
<anchorfile>LaunchTask/executeTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>proceed</name>
<anchorfile>LaunchTask/proceed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>LaunchTask/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canAbort</name>
<anchorfile>LaunchTask/canAbort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;LogModel&gt;</type>
<name>getLogModel</name>
<anchorfile>LaunchTask/getLogModel.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>substituteVariables</name>
<anchorfile>LaunchTask/substituteVariables.adoc</anchorfile>
<anchor/>
<arglist>(QString&amp; cmd, bool isLaunch)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>censorPrivateInfo</name>
<anchorfile>LaunchTask/censorPrivateInfo.adoc</anchorfile>
<anchor/>
<arglist>(QString in)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>emitFailed</name>
<anchorfile>LaunchTask/emitFailed.adoc</anchorfile>
<anchor/>
<arglist>(QString reason)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>emitSucceeded</name>
<anchorfile>LaunchTask/emitSucceeded.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>readyForLaunch</name>
<anchorfile>LaunchTask/readyForLaunch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>requestProgress</name>
<anchorfile>LaunchTask/requestProgress.adoc</anchorfile>
<anchor/>
<arglist>(Task* task)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>requestLogging</name>
<anchorfile>LaunchTask/requestLogging.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onLogLines</name>
<anchorfile>LaunchTask/onLogLines.adoc</anchorfile>
<anchor/>
<arglist>(const QStringList&amp; lines, MessageLevel::Enum defaultLevel)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onLogLine</name>
<anchorfile>LaunchTask/onLogLine.adoc</anchorfile>
<anchor/>
<arglist>(QString line, MessageLevel::Enum defaultLevel)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onReadyForLaunch</name>
<anchorfile>LaunchTask/onReadyForLaunch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onStepFinished</name>
<anchorfile>LaunchTask/onStepFinished.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>onProgressReportingRequested</name>
<anchorfile>LaunchTask/onProgressReportingRequested.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>BaseInstance</name>
<filename>BaseInstance.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>BaseInstance/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>BaseInstance/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>BaseInstance/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>BaseInstance/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>BaseInstance</name>
<anchorfile>BaseInstance/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(SettingsObjectPtr globalSettings, SettingsObjectPtr settings, const QString&amp; rootDir)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~BaseInstance</name>
<anchorfile>BaseInstance/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>saveNow</name>
<anchorfile>BaseInstance/saveNow.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>invalidate</name>
<anchorfile>BaseInstance/invalidate.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>id</name>
<anchorfile>BaseInstance/id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setMinecraftRunning</name>
<anchorfile>BaseInstance/setMinecraftRunning.adoc</anchorfile>
<anchor/>
<arglist>(bool running)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setRunning</name>
<anchorfile>BaseInstance/setRunning.adoc</anchorfile>
<anchor/>
<arglist>(bool running)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isRunning</name>
<anchorfile>BaseInstance/isRunning.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>int64_t</type>
<name>totalTimePlayed</name>
<anchorfile>BaseInstance/totalTimePlayed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>int64_t</type>
<name>lastTimePlayed</name>
<anchorfile>BaseInstance/lastTimePlayed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>resetTimePlayed</name>
<anchorfile>BaseInstance/resetTimePlayed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>instanceType</name>
<anchorfile>BaseInstance/instanceType.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>instanceRoot</name>
<anchorfile>BaseInstance/instanceRoot.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>gameRoot</name>
<anchorfile>BaseInstance/gameRoot.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>modsRoot</name>
<anchorfile>BaseInstance/modsRoot.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>name</name>
<anchorfile>BaseInstance/name.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setName</name>
<anchorfile>BaseInstance/setName.adoc</anchorfile>
<anchor/>
<arglist>(QString val)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>syncInstanceDirName</name>
<anchorfile>BaseInstance/syncInstanceDirName.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; newRoot)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>windowTitle</name>
<anchorfile>BaseInstance/windowTitle.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>iconKey</name>
<anchorfile>BaseInstance/iconKey.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setIconKey</name>
<anchorfile>BaseInstance/setIconKey.adoc</anchorfile>
<anchor/>
<arglist>(QString val)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>notes</name>
<anchorfile>BaseInstance/notes.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setNotes</name>
<anchorfile>BaseInstance/setNotes.adoc</anchorfile>
<anchor/>
<arglist>(QString val)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getPreLaunchCommand</name>
<anchorfile>BaseInstance/getPreLaunchCommand.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getPostExitCommand</name>
<anchorfile>BaseInstance/getPostExitCommand.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getWrapperCommand</name>
<anchorfile>BaseInstance/getWrapperCommand.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isManagedPack</name>
<anchorfile>BaseInstance/isManagedPack.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getManagedPackType</name>
<anchorfile>BaseInstance/getManagedPackType.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getManagedPackID</name>
<anchorfile>BaseInstance/getManagedPackID.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getManagedPackName</name>
<anchorfile>BaseInstance/getManagedPackName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getManagedPackVersionID</name>
<anchorfile>BaseInstance/getManagedPackVersionID.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getManagedPackVersionName</name>
<anchorfile>BaseInstance/getManagedPackVersionName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setManagedPack</name>
<anchorfile>BaseInstance/setManagedPack.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; type, const QString&amp; id, const QString&amp; name, const QString&amp; versionId, const QString&amp; version)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>copyManagedPack</name>
<anchorfile>BaseInstance/copyManagedPack.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance&amp; other)</arglist>
</member>
<member kind="function">
<type>MessageLevel::Enum</type>
<name>guessLevel</name>
<anchorfile>BaseInstance/guessLevel.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; line, MessageLevel::Enum level)</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>extraArguments</name>
<anchorfile>BaseInstance/extraArguments.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QSet&lt;QString&gt;</type>
<name>traits</name>
<anchorfile>BaseInstance/traits.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>qint64</type>
<name>lastLaunch</name>
<anchorfile>BaseInstance/lastLaunch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setLastLaunch</name>
<anchorfile>BaseInstance/setLastLaunch.adoc</anchorfile>
<anchor/>
<arglist>(qint64 val)</arglist>
</member>
<member kind="function">
<type>SettingsObjectPtr</type>
<name>settings</name>
<anchorfile>BaseInstance/settings.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>loadSpecificSettings</name>
<anchorfile>BaseInstance/loadSpecificSettings.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QList&lt;Task::Ptr&gt;</type>
<name>createUpdateTask</name>
<anchorfile>BaseInstance/createUpdateTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;LaunchTask&gt;</type>
<name>createLaunchTask</name>
<anchorfile>BaseInstance/createLaunchTask.adoc</anchorfile>
<anchor/>
<arglist>(AuthSessionPtr account, MinecraftTarget::Ptr targetToJoin)</arglist>
</member>
<member kind="function">
<type>shared_qobject_ptr&lt;LaunchTask&gt;</type>
<name>getLaunchTask</name>
<anchorfile>BaseInstance/getLaunchTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QProcessEnvironment</type>
<name>createEnvironment</name>
<anchorfile>BaseInstance/createEnvironment.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QProcessEnvironment</type>
<name>createLaunchEnvironment</name>
<anchorfile>BaseInstance/createLaunchEnvironment.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>IPathMatcher::Ptr</type>
<name>getLogFileMatcher</name>
<anchorfile>BaseInstance/getLogFileMatcher.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getLogFileRoot</name>
<anchorfile>BaseInstance/getLogFileRoot.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>getStatusbarDescription</name>
<anchorfile>BaseInstance/getStatusbarDescription.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>instanceConfigFolder</name>
<anchorfile>BaseInstance/instanceConfigFolder.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QMap&lt;QString, QString&gt;</type>
<name>getVariables</name>
<anchorfile>BaseInstance/getVariables.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>typeName</name>
<anchorfile>BaseInstance/typeName.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>updateRuntimeContext</name>
<anchorfile>BaseInstance/updateRuntimeContext.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>RuntimeContext</type>
<name>runtimeContext</name>
<anchorfile>BaseInstance/runtimeContext.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasVersionBroken</name>
<anchorfile>BaseInstance/hasVersionBroken.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setVersionBroken</name>
<anchorfile>BaseInstance/setVersionBroken.adoc</anchorfile>
<anchor/>
<arglist>(bool value)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasUpdateAvailable</name>
<anchorfile>BaseInstance/hasUpdateAvailable.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setUpdateAvailable</name>
<anchorfile>BaseInstance/setUpdateAvailable.adoc</anchorfile>
<anchor/>
<arglist>(bool value)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>hasCrashed</name>
<anchorfile>BaseInstance/hasCrashed.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setCrashed</name>
<anchorfile>BaseInstance/setCrashed.adoc</anchorfile>
<anchor/>
<arglist>(bool value)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canLaunch</name>
<anchorfile>BaseInstance/canLaunch.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canEdit</name>
<anchorfile>BaseInstance/canEdit.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>canExport</name>
<anchorfile>BaseInstance/canExport.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>populateLaunchMenu</name>
<anchorfile>BaseInstance/populateLaunchMenu.adoc</anchorfile>
<anchor/>
<arglist>(QMenu* menu)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>reloadSettings</name>
<anchorfile>BaseInstance/reloadSettings.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>verboseDescription</name>
<anchorfile>BaseInstance/verboseDescription.adoc</anchorfile>
<anchor/>
<arglist>(AuthSessionPtr session, MinecraftTarget::Ptr targetToJoin)</arglist>
</member>
<member kind="function">
<type>Status</type>
<name>currentStatus</name>
<anchorfile>BaseInstance/currentStatus.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>int</type>
<name>getConsoleMaxLines</name>
<anchorfile>BaseInstance/getConsoleMaxLines.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>shouldStopOnConsoleOverflow</name>
<anchorfile>BaseInstance/shouldStopOnConsoleOverflow.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QStringList</type>
<name>getLinkedInstances</name>
<anchorfile>BaseInstance/getLinkedInstances.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setLinkedInstances</name>
<anchorfile>BaseInstance/setLinkedInstances.adoc</anchorfile>
<anchor/>
<arglist>(const QStringList&amp; list)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>addLinkedInstanceId</name>
<anchorfile>BaseInstance/addLinkedInstanceId.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>removeLinkedInstanceId</name>
<anchorfile>BaseInstance/removeLinkedInstanceId.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isLinkedToInstanceId</name>
<anchorfile>BaseInstance/isLinkedToInstanceId.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; id)</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isLegacy</name>
<anchorfile>BaseInstance/isLegacy.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>changeStatus</name>
<anchorfile>BaseInstance/changeStatus.adoc</anchorfile>
<anchor/>
<arglist>(Status newStatus)</arglist>
</member>
<member kind="function">
<type>SettingsObjectPtr</type>
<name>globalSettings</name>
<anchorfile>BaseInstance/globalSettings.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>isSpecificSettingsLoaded</name>
<anchorfile>BaseInstance/isSpecificSettingsLoaded.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setSpecificSettingsLoaded</name>
<anchorfile>BaseInstance/setSpecificSettingsLoaded.adoc</anchorfile>
<anchor/>
<arglist>(bool loaded)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>propertiesChanged</name>
<anchorfile>BaseInstance/propertiesChanged.adoc</anchorfile>
<anchor/>
<arglist>(BaseInstance* inst)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>launchTaskChanged</name>
<anchorfile>BaseInstance/launchTaskChanged.adoc</anchorfile>
<anchor/>
<arglist>(shared_qobject_ptr&lt;LaunchTask&gt; )</arglist>
</member>
<member kind="function">
<type>void</type>
<name>runningStatusChanged</name>
<anchorfile>BaseInstance/runningStatusChanged.adoc</anchorfile>
<anchor/>
<arglist>(bool running)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>profilerChanged</name>
<anchorfile>BaseInstance/profilerChanged.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>statusChanged</name>
<anchorfile>BaseInstance/statusChanged.adoc</anchorfile>
<anchor/>
<arglist>(Status from, Status to)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>iconUpdated</name>
<anchorfile>BaseInstance/iconUpdated.adoc</anchorfile>
<anchor/>
<arglist>(QString key)</arglist>
</member>
</compound>
<compound kind="class">
<name>InstancePtr</name>
<filename>InstancePtr.adoc</filename>
</compound>
<compound kind="class">
<name>__int64_t</name>
<filename>__int64_t.adoc</filename>
</compound>
<compound kind="class">
<name>int64_t</name>
<filename>int64_t.adoc</filename>
</compound>
<compound kind="class">
<name>QSet</name>
<filename>QSet.adoc</filename>
</compound>
<compound kind="class">
<name>QProcessEnvironment</name>
<filename>QProcessEnvironment.adoc</filename>
</compound>
<compound kind="class">
<name>QMenu</name>
<filename>QMenu.adoc</filename>
</compound>
<compound kind="class">
<name>QMetaTypeId</name>
<filename>QMetaTypeId-0f8.adoc</filename>
<member kind="function">
<type>int</type>
<name>qt_metatype_id</name>
<anchorfile>QMetaTypeId-0f8/qt_metatype_id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>LaunchController</name>
<filename>LaunchController.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>LaunchController/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>LaunchController/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>LaunchController/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>LaunchController/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>executeTask</name>
<anchorfile>LaunchController/executeTask.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>LaunchController</name>
<anchorfile>LaunchController/2constructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~LaunchController</name>
<anchorfile>LaunchController/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setInstance</name>
<anchorfile>LaunchController/setInstance.adoc</anchorfile>
<anchor/>
<arglist>(InstancePtr instance)</arglist>
</member>
<member kind="function">
<type>InstancePtr</type>
<name>instance</name>
<anchorfile>LaunchController/instance.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setOnline</name>
<anchorfile>LaunchController/setOnline.adoc</anchorfile>
<anchor/>
<arglist>(bool online)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setOfflineName</name>
<anchorfile>LaunchController/setOfflineName.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; offlineName)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setDemo</name>
<anchorfile>LaunchController/setDemo.adoc</anchorfile>
<anchor/>
<arglist>(bool demo)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setProfiler</name>
<anchorfile>LaunchController/setProfiler.adoc</anchorfile>
<anchor/>
<arglist>(BaseProfilerFactory* profiler)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setParentWidget</name>
<anchorfile>LaunchController/setParentWidget.adoc</anchorfile>
<anchor/>
<arglist>(QWidget* widget)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setTargetToJoin</name>
<anchorfile>LaunchController/setTargetToJoin.adoc</anchorfile>
<anchor/>
<arglist>(MinecraftTarget::Ptr targetToJoin)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>setAccountToUse</name>
<anchorfile>LaunchController/setAccountToUse.adoc</anchorfile>
<anchor/>
<arglist>(MinecraftAccountPtr accountToUse)</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>id</name>
<anchorfile>LaunchController/id.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>abort</name>
<anchorfile>LaunchController/abort.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>LocalPeer</name>
<filename>LocalPeer.adoc</filename>
</compound>
<compound kind="class">
<name>InstanceWindow</name>
<filename>InstanceWindow.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>InstanceWindow/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>InstanceWindow/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>InstanceWindow/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>InstanceWindow/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>InstanceWindow</name>
<anchorfile>InstanceWindow/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(InstancePtr proc, QWidget* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~InstanceWindow</name>
<anchorfile>InstanceWindow/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>selectPage</name>
<anchorfile>InstanceWindow/selectPage.adoc</anchorfile>
<anchor/>
<arglist>(QString pageId)</arglist>
</member>
<member kind="function">
<type>BasePage*</type>
<name>selectedPage</name>
<anchorfile>InstanceWindow/selectedPage.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>refreshContainer</name>
<anchorfile>InstanceWindow/refreshContainer.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>instanceId</name>
<anchorfile>InstanceWindow/instanceId.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>saveAll</name>
<anchorfile>InstanceWindow/saveAll.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>requestClose</name>
<anchorfile>InstanceWindow/requestClose.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>isClosing</name>
<anchorfile>InstanceWindow/isClosing.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>closeEvent</name>
<anchorfile>InstanceWindow/closeEvent.adoc</anchorfile>
<anchor/>
<arglist>(QCloseEvent* )</arglist>
</member>
</compound>
<compound kind="class">
<name>MainWindow</name>
<filename>MainWindow.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>MainWindow/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>MainWindow/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>MainWindow/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>MainWindow/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>MainWindow</name>
<anchorfile>MainWindow/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QWidget* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~MainWindow</name>
<anchorfile>MainWindow/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>bool</type>
<name>eventFilter</name>
<anchorfile>MainWindow/eventFilter.adoc</anchorfile>
<anchor/>
<arglist>(QObject* obj, QEvent* ev)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>closeEvent</name>
<anchorfile>MainWindow/closeEvent.adoc</anchorfile>
<anchor/>
<arglist>(QCloseEvent* event)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>changeEvent</name>
<anchorfile>MainWindow/changeEvent.adoc</anchorfile>
<anchor/>
<arglist>(QEvent* event)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>checkInstancePathForProblems</name>
<anchorfile>MainWindow/checkInstancePathForProblems.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>updatesAllowedChanged</name>
<anchorfile>MainWindow/updatesAllowedChanged.adoc</anchorfile>
<anchor/>
<arglist>(bool allowed)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>processURLs</name>
<anchorfile>MainWindow/processURLs.adoc</anchorfile>
<anchor/>
<arglist>(QList&lt;QUrl&gt; urls)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>isClosing</name>
<anchorfile>MainWindow/isClosing.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>QMenu*</type>
<name>createPopupMenu</name>
<anchorfile>MainWindow/createPopupMenu.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>SetupWizard</name>
<filename>SetupWizard.adoc</filename>
<member kind="function">
<type>const QMetaObject*</type>
<name>metaObject</name>
<anchorfile>SetupWizard/metaObject.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void*</type>
<name>qt_metacast</name>
<anchorfile>SetupWizard/qt_metacast.adoc</anchorfile>
<anchor/>
<arglist>(const char* )</arglist>
</member>
<member kind="function">
<type>int</type>
<name>qt_metacall</name>
<anchorfile>SetupWizard/qt_metacall.adoc</anchorfile>
<anchor/>
<arglist>(QMetaObject::Call , int , void** )</arglist>
</member>
<member kind="function">
<type>QString</type>
<name>tr</name>
<anchorfile>SetupWizard/tr.adoc</anchorfile>
<anchor/>
<arglist>(const char* s, const char* c, int n)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>SetupWizard</name>
<anchorfile>SetupWizard/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(QWidget* parent)</arglist>
</member>
<member kind="function">
<type>void</type>
<name>~SetupWizard</name>
<anchorfile>SetupWizard/2destructor.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
<member kind="function">
<type>void</type>
<name>changeEvent</name>
<anchorfile>SetupWizard/changeEvent.adoc</anchorfile>
<anchor/>
<arglist>(QEvent* event)</arglist>
</member>
<member kind="function">
<type>BaseWizardPage*</type>
<name>getBasePage</name>
<anchorfile>SetupWizard/getBasePage.adoc</anchorfile>
<anchor/>
<arglist>(int id)</arglist>
</member>
<member kind="function">
<type>BaseWizardPage*</type>
<name>getCurrentBasePage</name>
<anchorfile>SetupWizard/getCurrentBasePage.adoc</anchorfile>
<anchor/>
<arglist>()</arglist>
</member>
</compound>
<compound kind="class">
<name>GenericPageProvider</name>
<filename>GenericPageProvider.adoc</filename>
<member kind="function">
<type>void</type>
<name>GenericPageProvider</name>
<anchorfile>GenericPageProvider/2constructor.adoc</anchorfile>
<anchor/>
<arglist>(const QString&amp; d